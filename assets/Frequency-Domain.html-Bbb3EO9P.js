import{_ as n,c as a,b as e,o as i}from"./app-BHE9oQwv.js";const l={};function p(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h2 id="频域分析" tabindex="-1"><a class="header-anchor" href="#频域分析"><span>频域分析</span></a></h2><h3 id="conv" tabindex="-1"><a class="header-anchor" href="#conv"><span>Conv</span></a></h3><h4 id="函数简介" tabindex="-1"><a class="header-anchor" href="#函数简介"><span>函数简介</span></a></h4><p>本函数对两个输入序列进行卷积，即多项式乘法。</p><p><strong>函数名：</strong> CONV</p><p><strong>输入序列：</strong> 仅支持两个输入序列，类型均为 INT32 / INT64 / FLOAT / DOUBLE</p><p><strong>输出序列：</strong> 输出单个序列，类型为DOUBLE，它是两个序列卷积的结果。序列的时间戳从0开始，仅用于表示顺序。</p><p><strong>提示：</strong> 输入序列中的<code>NaN</code>将被忽略。</p><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h4><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+---------------+---------------+</span>
<span class="line">|                         Time|root.test.d2.s1|root.test.d2.s2|</span>
<span class="line">+-----------------------------+---------------+---------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|            1.0|            7.0|</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|            0.0|            2.0|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|            1.0|           null|</span>
<span class="line">+-----------------------------+---------------+---------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的SQL语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> conv<span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------------------------------+</span>
<span class="line">|                         Time|conv(root.test.d2.s1, root.test.d2.s2)|</span>
<span class="line">+-----------------------------+--------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|                                   7.0|</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|                                   2.0|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|                                   7.0|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|                                   2.0|</span>
<span class="line">+-----------------------------+--------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deconv" tabindex="-1"><a class="header-anchor" href="#deconv"><span>Deconv</span></a></h3><h4 id="函数简介-1" tabindex="-1"><a class="header-anchor" href="#函数简介-1"><span>函数简介</span></a></h4><p>本函数对两个输入序列进行去卷积，即多项式除法运算。</p><p><strong>函数名：</strong> DECONV</p><p><strong>输入序列：</strong> 仅支持两个输入序列，类型均为 INT32 / INT64 / FLOAT / DOUBLE</p><p><strong>参数：</strong></p><ul><li><code>result</code>：去卷积的结果，取值为&#39;quotient&#39;或&#39;remainder&#39;，分别对应于去卷积的商和余数。在缺省情况下，输出去卷积的商。</li></ul><p><strong>输出序列：</strong> 输出单个序列，类型为DOUBLE。它是将第二个序列从第一个序列中去卷积（第一个序列除以第二个序列）的结果。序列的时间戳从0开始，仅用于表示顺序。</p><p><strong>提示：</strong> 输入序列中的<code>NaN</code>将被忽略。</p><h4 id="使用示例-1" tabindex="-1"><a class="header-anchor" href="#使用示例-1"><span>使用示例</span></a></h4><h5 id="计算去卷积的商" tabindex="-1"><a class="header-anchor" href="#计算去卷积的商"><span>计算去卷积的商</span></a></h5><p>当<code>result</code>参数缺省或为&#39;quotient&#39;时，本函数计算去卷积的商。</p><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+---------------+---------------+</span>
<span class="line">|                         Time|root.test.d2.s3|root.test.d2.s2|</span>
<span class="line">+-----------------------------+---------------+---------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|            8.0|            7.0|</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|            2.0|            2.0|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|            7.0|           null|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|            2.0|           null|</span>
<span class="line">+-----------------------------+---------------+---------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的SQL语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> deconv<span class="token punctuation">(</span>s3<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+----------------------------------------+</span>
<span class="line">|                         Time|deconv(root.test.d2.s3, root.test.d2.s2)|</span>
<span class="line">+-----------------------------+----------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|                                     1.0|</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|                                     0.0|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|                                     1.0|</span>
<span class="line">+-----------------------------+----------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="计算去卷积的余数" tabindex="-1"><a class="header-anchor" href="#计算去卷积的余数"><span>计算去卷积的余数</span></a></h5><p>当<code>result</code>参数为&#39;remainder&#39;时，本函数计算去卷积的余数。输入序列同上，用于查询的SQL语句如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> deconv<span class="token punctuation">(</span>s3<span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token string">&#39;result&#39;</span><span class="token operator">=</span><span class="token string">&#39;remainder&#39;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------------------------------------------------------+</span>
<span class="line">|                         Time|deconv(root.test.d2.s3, root.test.d2.s2, &quot;result&quot;=&quot;remainder&quot;)|</span>
<span class="line">+-----------------------------+--------------------------------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|                                                           1.0|</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|                                                           0.0|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|                                                           0.0|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|                                                           0.0|</span>
<span class="line">+-----------------------------+--------------------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dwt" tabindex="-1"><a class="header-anchor" href="#dwt"><span>DWT</span></a></h3><h4 id="函数简介-2" tabindex="-1"><a class="header-anchor" href="#函数简介-2"><span>函数简介</span></a></h4><p>本函数对输入序列进行一维离散小波变换。</p><p><strong>函数名：</strong> DWT</p><p><strong>输入序列：</strong> 仅支持单个输入序列，类型为 INT32 / INT64 / FLOAT / DOUBLE</p><p><strong>参数：</strong></p><ul><li><code>method</code>：小波滤波的类型，提供&#39;Haar&#39;, &#39;DB4&#39;, &#39;DB6&#39;, &#39;DB8&#39;，其中DB指代Daubechies。若不设置该参数，则用户需提供小波滤波的系数。不区分大小写。</li><li><code>coef</code>：小波滤波的系数。若提供该参数，请使用英文逗号&#39;,&#39;分割各项，不添加空格或其它符号。</li><li><code>layer</code>：进行变换的次数，最终输出的向量个数等同于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">layer+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">yer</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>.默认取1。</li></ul><p><strong>输出序列：</strong> 输出单个序列，类型为DOUBLE，长度与输入相等。</p><p><strong>提示：</strong> 输入序列长度必须为2的整数次幂。</p><h4 id="使用示例-2" tabindex="-1"><a class="header-anchor" href="#使用示例-2"><span>使用示例</span></a></h4><h5 id="haar变换" tabindex="-1"><a class="header-anchor" href="#haar变换"><span>Haar变换</span></a></h5><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+---------------+</span>
<span class="line">|                         Time|root.test.d1.s1|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|            0.0|</span>
<span class="line">|1970-01-01T08:00:00.100+08:00|            0.2|</span>
<span class="line">|1970-01-01T08:00:00.200+08:00|            1.5|</span>
<span class="line">|1970-01-01T08:00:00.300+08:00|            1.2|</span>
<span class="line">|1970-01-01T08:00:00.400+08:00|            0.6|</span>
<span class="line">|1970-01-01T08:00:00.500+08:00|            1.7|</span>
<span class="line">|1970-01-01T08:00:00.600+08:00|            0.8|</span>
<span class="line">|1970-01-01T08:00:00.700+08:00|            2.0|</span>
<span class="line">|1970-01-01T08:00:00.800+08:00|            2.5|</span>
<span class="line">|1970-01-01T08:00:00.900+08:00|            2.1|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|            0.0|</span>
<span class="line">|1970-01-01T08:00:01.100+08:00|            2.0|</span>
<span class="line">|1970-01-01T08:00:01.200+08:00|            1.8|</span>
<span class="line">|1970-01-01T08:00:01.300+08:00|            1.2|</span>
<span class="line">|1970-01-01T08:00:01.400+08:00|            1.0|</span>
<span class="line">|1970-01-01T08:00:01.500+08:00|            1.6|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的SQL语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> dwt<span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token string">&quot;method&quot;</span><span class="token operator">=</span><span class="token string">&quot;haar&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------------+</span>
<span class="line">|                         Time|dwt(root.test.d1.s1, &quot;method&quot;=&quot;haar&quot;)|</span>
<span class="line">+-----------------------------+-------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|                  0.14142135834465192|</span>
<span class="line">|1970-01-01T08:00:00.100+08:00|                    1.909188342921157|</span>
<span class="line">|1970-01-01T08:00:00.200+08:00|                   1.6263456473052773|</span>
<span class="line">|1970-01-01T08:00:00.300+08:00|                   1.9798989957517026|</span>
<span class="line">|1970-01-01T08:00:00.400+08:00|                    3.252691126023161|</span>
<span class="line">|1970-01-01T08:00:00.500+08:00|                    1.414213562373095|</span>
<span class="line">|1970-01-01T08:00:00.600+08:00|                   2.1213203435596424|</span>
<span class="line">|1970-01-01T08:00:00.700+08:00|                   1.8384776479437628|</span>
<span class="line">|1970-01-01T08:00:00.800+08:00|                 -0.14142135834465192|</span>
<span class="line">|1970-01-01T08:00:00.900+08:00|                  0.21213200063848547|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|                  -0.7778174761639416|</span>
<span class="line">|1970-01-01T08:00:01.100+08:00|                  -0.8485281289944873|</span>
<span class="line">|1970-01-01T08:00:01.200+08:00|                   0.2828427799095765|</span>
<span class="line">|1970-01-01T08:00:01.300+08:00|                   -1.414213562373095|</span>
<span class="line">|1970-01-01T08:00:01.400+08:00|                  0.42426400127697095|</span>
<span class="line">|1970-01-01T08:00:01.500+08:00|                 -0.42426408557066786|</span>
<span class="line">+-----------------------------+-------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fft" tabindex="-1"><a class="header-anchor" href="#fft"><span>FFT</span></a></h3><h4 id="函数简介-3" tabindex="-1"><a class="header-anchor" href="#函数简介-3"><span>函数简介</span></a></h4><p>本函数对输入序列进行快速傅里叶变换。</p><p><strong>函数名：</strong> FFT</p><p><strong>输入序列：</strong> 仅支持单个输入序列，类型为 INT32 / INT64 / FLOAT / DOUBLE</p><p><strong>参数：</strong></p><ul><li><code>method</code>：傅里叶变换的类型，取值为&#39;uniform&#39;或&#39;nonuniform&#39;，缺省情况下为&#39;uniform&#39;。当取值为&#39;uniform&#39;时，时间戳将被忽略，所有数据点都将被视作等距的，并应用等距快速傅里叶算法；当取值为&#39;nonuniform&#39;时，将根据时间戳应用非等距快速傅里叶算法（未实现）。</li><li><code>result</code>：傅里叶变换的结果，取值为&#39;real&#39;、&#39;imag&#39;、&#39;abs&#39;或&#39;angle&#39;，分别对应于变换结果的实部、虚部、模和幅角。在缺省情况下，输出变换的模。</li><li><code>compress</code>：压缩参数，取值范围(0,1]，是有损压缩时保留的能量比例。在缺省情况下，不进行压缩。</li></ul><p><strong>输出序列：</strong> 输出单个序列，类型为DOUBLE，长度与输入相等。序列的时间戳从0开始，仅用于表示顺序。</p><p><strong>提示：</strong> 输入序列中的<code>NaN</code>将被忽略。</p><h4 id="使用示例-3" tabindex="-1"><a class="header-anchor" href="#使用示例-3"><span>使用示例</span></a></h4><h5 id="等距傅里叶变换" tabindex="-1"><a class="header-anchor" href="#等距傅里叶变换"><span>等距傅里叶变换</span></a></h5><p>当<code>type</code>参数缺省或为&#39;uniform&#39;时，本函数进行等距傅里叶变换。</p><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+---------------+</span>
<span class="line">|                         Time|root.test.d1.s1|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|       2.902113|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|      1.1755705|</span>
<span class="line">|1970-01-01T08:00:02.000+08:00|     -2.1755705|</span>
<span class="line">|1970-01-01T08:00:03.000+08:00|     -1.9021131|</span>
<span class="line">|1970-01-01T08:00:04.000+08:00|            1.0|</span>
<span class="line">|1970-01-01T08:00:05.000+08:00|      1.9021131|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|      0.1755705|</span>
<span class="line">|1970-01-01T08:00:07.000+08:00|     -1.1755705|</span>
<span class="line">|1970-01-01T08:00:08.000+08:00|      -0.902113|</span>
<span class="line">|1970-01-01T08:00:09.000+08:00|            0.0|</span>
<span class="line">|1970-01-01T08:00:10.000+08:00|       0.902113|</span>
<span class="line">|1970-01-01T08:00:11.000+08:00|      1.1755705|</span>
<span class="line">|1970-01-01T08:00:12.000+08:00|     -0.1755705|</span>
<span class="line">|1970-01-01T08:00:13.000+08:00|     -1.9021131|</span>
<span class="line">|1970-01-01T08:00:14.000+08:00|           -1.0|</span>
<span class="line">|1970-01-01T08:00:15.000+08:00|      1.9021131|</span>
<span class="line">|1970-01-01T08:00:16.000+08:00|      2.1755705|</span>
<span class="line">|1970-01-01T08:00:17.000+08:00|     -1.1755705|</span>
<span class="line">|1970-01-01T08:00:18.000+08:00|      -2.902113|</span>
<span class="line">|1970-01-01T08:00:19.000+08:00|            0.0|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的SQL语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> fft<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+----------------------+</span>
<span class="line">|                         Time|  fft(root.test.d1.s1)|</span>
<span class="line">+-----------------------------+----------------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|                   0.0|</span>
<span class="line">|1970-01-01T08:00:00.001+08:00| 1.2727111142703152E-8|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|  2.385520799101839E-7|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|  8.723291723972645E-8|</span>
<span class="line">|1970-01-01T08:00:00.004+08:00|    19.999999960195904|</span>
<span class="line">|1970-01-01T08:00:00.005+08:00|     9.999999850988388|</span>
<span class="line">|1970-01-01T08:00:00.006+08:00| 3.2260694930700566E-7|</span>
<span class="line">|1970-01-01T08:00:00.007+08:00|  8.723291605373329E-8|</span>
<span class="line">|1970-01-01T08:00:00.008+08:00|  1.108657103979944E-7|</span>
<span class="line">|1970-01-01T08:00:00.009+08:00| 1.2727110997246171E-8|</span>
<span class="line">|1970-01-01T08:00:00.010+08:00|1.9852334701272664E-23|</span>
<span class="line">|1970-01-01T08:00:00.011+08:00| 1.2727111194499847E-8|</span>
<span class="line">|1970-01-01T08:00:00.012+08:00|  1.108657103979944E-7|</span>
<span class="line">|1970-01-01T08:00:00.013+08:00|  8.723291785769131E-8|</span>
<span class="line">|1970-01-01T08:00:00.014+08:00|  3.226069493070057E-7|</span>
<span class="line">|1970-01-01T08:00:00.015+08:00|     9.999999850988388|</span>
<span class="line">|1970-01-01T08:00:00.016+08:00|    19.999999960195904|</span>
<span class="line">|1970-01-01T08:00:00.017+08:00|  8.723291747109068E-8|</span>
<span class="line">|1970-01-01T08:00:00.018+08:00| 2.3855207991018386E-7|</span>
<span class="line">|1970-01-01T08:00:00.019+08:00| 1.2727112069910878E-8|</span>
<span class="line">+-----------------------------+----------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：输入序列服从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>t</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>t</mi><mi mathvariant="normal">/</mi><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=sin(2\\pi t/4)+2sin(2\\pi t/5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">t</span><span class="mord">/4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">t</span><span class="mord">/5</span><span class="mclose">)</span></span></span></span>，长度为20，因此在输出序列中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">k=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">k=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span>处有尖峰。</p><h5 id="等距傅里叶变换并压缩" tabindex="-1"><a class="header-anchor" href="#等距傅里叶变换并压缩"><span>等距傅里叶变换并压缩</span></a></h5><p>输入序列同上，用于查询的SQL语句如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> fft<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&#39;result&#39;</span><span class="token operator">=</span><span class="token string">&#39;real&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;compress&#39;</span><span class="token operator">=</span><span class="token string">&#39;0.99&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fft<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&#39;result&#39;</span><span class="token operator">=</span><span class="token string">&#39;imag&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;compress&#39;</span><span class="token operator">=</span><span class="token string">&#39;0.99&#39;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+----------------------+----------------------+</span>
<span class="line">|                         Time|  fft(root.test.d1.s1,|  fft(root.test.d1.s1,|</span>
<span class="line">|                             |      &quot;result&quot;=&quot;real&quot;,|      &quot;result&quot;=&quot;imag&quot;,|</span>
<span class="line">|                             |    &quot;compress&quot;=&quot;0.99&quot;)|    &quot;compress&quot;=&quot;0.99&quot;)|</span>
<span class="line">+-----------------------------+----------------------+----------------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|                   0.0|                   0.0|</span>
<span class="line">|1970-01-01T08:00:00.001+08:00| -3.932894010461041E-9| 1.2104201863039066E-8|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|-1.4021739447490164E-7| 1.9299268669082926E-7|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00| -7.057291240286645E-8|  5.127422242345858E-8|</span>
<span class="line">|1970-01-01T08:00:00.004+08:00|    19.021130288047125|    -6.180339875198807|</span>
<span class="line">|1970-01-01T08:00:00.005+08:00|     9.999999850988388| 3.501852745067114E-16|</span>
<span class="line">|1970-01-01T08:00:00.019+08:00| -3.932894898639461E-9|-1.2104202549376264E-8|</span>
<span class="line">+-----------------------------+----------------------+----------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：基于傅里叶变换结果的共轭性质，压缩结果只保留前一半；根据给定的压缩参数，从低频到高频保留数据点，直到保留的能量比例超过该值；保留最后一个数据点以表示序列长度。</p><h3 id="highpass" tabindex="-1"><a class="header-anchor" href="#highpass"><span>HighPass</span></a></h3><h4 id="函数简介-4" tabindex="-1"><a class="header-anchor" href="#函数简介-4"><span>函数简介</span></a></h4><p>本函数对输入序列进行高通滤波，提取高于截止频率的分量。输入序列的时间戳将被忽略，所有数据点都将被视作等距的。</p><p><strong>函数名：</strong> HIGHPASS</p><p><strong>输入序列：</strong> 仅支持单个输入序列，类型为 INT32 / INT64 / FLOAT / DOUBLE</p><p><strong>参数：</strong></p><ul><li><code>wpass</code>：归一化后的截止频率，取值为(0,1)，不可缺省。</li></ul><p><strong>输出序列：</strong> 输出单个序列，类型为DOUBLE，它是滤波后的序列，长度与时间戳均与输入一致。</p><p><strong>提示：</strong> 输入序列中的<code>NaN</code>将被忽略。</p><h4 id="使用示例-4" tabindex="-1"><a class="header-anchor" href="#使用示例-4"><span>使用示例</span></a></h4><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+---------------+</span>
<span class="line">|                         Time|root.test.d1.s1|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|       2.902113|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|      1.1755705|</span>
<span class="line">|1970-01-01T08:00:02.000+08:00|     -2.1755705|</span>
<span class="line">|1970-01-01T08:00:03.000+08:00|     -1.9021131|</span>
<span class="line">|1970-01-01T08:00:04.000+08:00|            1.0|</span>
<span class="line">|1970-01-01T08:00:05.000+08:00|      1.9021131|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|      0.1755705|</span>
<span class="line">|1970-01-01T08:00:07.000+08:00|     -1.1755705|</span>
<span class="line">|1970-01-01T08:00:08.000+08:00|      -0.902113|</span>
<span class="line">|1970-01-01T08:00:09.000+08:00|            0.0|</span>
<span class="line">|1970-01-01T08:00:10.000+08:00|       0.902113|</span>
<span class="line">|1970-01-01T08:00:11.000+08:00|      1.1755705|</span>
<span class="line">|1970-01-01T08:00:12.000+08:00|     -0.1755705|</span>
<span class="line">|1970-01-01T08:00:13.000+08:00|     -1.9021131|</span>
<span class="line">|1970-01-01T08:00:14.000+08:00|           -1.0|</span>
<span class="line">|1970-01-01T08:00:15.000+08:00|      1.9021131|</span>
<span class="line">|1970-01-01T08:00:16.000+08:00|      2.1755705|</span>
<span class="line">|1970-01-01T08:00:17.000+08:00|     -1.1755705|</span>
<span class="line">|1970-01-01T08:00:18.000+08:00|      -2.902113|</span>
<span class="line">|1970-01-01T08:00:19.000+08:00|            0.0|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的SQL语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> highpass<span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token string">&#39;wpass&#39;</span><span class="token operator">=</span><span class="token string">&#39;0.45&#39;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------------------+</span>
<span class="line">|                         Time|highpass(root.test.d1.s1, &quot;wpass&quot;=&quot;0.45&quot;)|</span>
<span class="line">+-----------------------------+-----------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|                       0.9999999534830373|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|                    1.7462829277628608E-8|</span>
<span class="line">|1970-01-01T08:00:02.000+08:00|                      -0.9999999593178128|</span>
<span class="line">|1970-01-01T08:00:03.000+08:00|                   -4.1115269056426626E-8|</span>
<span class="line">|1970-01-01T08:00:04.000+08:00|                       0.9999999925494194|</span>
<span class="line">|1970-01-01T08:00:05.000+08:00|                     3.328126513330016E-8|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|                      -1.0000000183304454|</span>
<span class="line">|1970-01-01T08:00:07.000+08:00|                    6.260191433311374E-10|</span>
<span class="line">|1970-01-01T08:00:08.000+08:00|                       1.0000000018134796|</span>
<span class="line">|1970-01-01T08:00:09.000+08:00|                   -3.097210911744423E-17|</span>
<span class="line">|1970-01-01T08:00:10.000+08:00|                      -1.0000000018134794|</span>
<span class="line">|1970-01-01T08:00:11.000+08:00|                   -6.260191627862097E-10|</span>
<span class="line">|1970-01-01T08:00:12.000+08:00|                       1.0000000183304454|</span>
<span class="line">|1970-01-01T08:00:13.000+08:00|                    -3.328126501424346E-8|</span>
<span class="line">|1970-01-01T08:00:14.000+08:00|                      -0.9999999925494196|</span>
<span class="line">|1970-01-01T08:00:15.000+08:00|                     4.111526915498874E-8|</span>
<span class="line">|1970-01-01T08:00:16.000+08:00|                       0.9999999593178128|</span>
<span class="line">|1970-01-01T08:00:17.000+08:00|                   -1.7462829341296528E-8|</span>
<span class="line">|1970-01-01T08:00:18.000+08:00|                      -0.9999999534830369|</span>
<span class="line">|1970-01-01T08:00:19.000+08:00|                   -1.035237222742873E-16|</span>
<span class="line">+-----------------------------+-----------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：输入序列服从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>t</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>t</mi><mi mathvariant="normal">/</mi><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=sin(2\\pi t/4)+2sin(2\\pi t/5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">t</span><span class="mord">/4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">t</span><span class="mord">/5</span><span class="mclose">)</span></span></span></span>，长度为20，因此高通滤波之后的输出序列服从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>t</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=sin(2\\pi t/4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">t</span><span class="mord">/4</span><span class="mclose">)</span></span></span></span>。</p><h3 id="ifft" tabindex="-1"><a class="header-anchor" href="#ifft"><span>IFFT</span></a></h3><h4 id="函数简介-5" tabindex="-1"><a class="header-anchor" href="#函数简介-5"><span>函数简介</span></a></h4><p>本函数将输入的两个序列作为实部和虚部视作一个复数，进行逆快速傅里叶变换，并输出结果的实部。输入数据的格式参见<code>FFT</code>函数的输出，并支持以<code>FFT</code>函数压缩后的输出作为本函数的输入。</p><p><strong>函数名：</strong> IFFT</p><p><strong>输入序列：</strong> 仅支持两个输入序列，类型均为 INT32 / INT64 / FLOAT / DOUBLE</p><p><strong>参数：</strong></p><ul><li><code>start</code>：输出序列的起始时刻，是一个格式为&#39;yyyy-MM-dd HH:mm:ss&#39;的时间字符串。在缺省情况下，为&#39;1970-01-01 08:00:00&#39;。</li><li><code>interval</code>：输出序列的时间间隔，是一个有单位的正数。目前支持五种单位，分别是&#39;ms&#39;（毫秒）、&#39;s&#39;（秒）、&#39;m&#39;（分钟）、&#39;h&#39;（小时）和&#39;d&#39;（天）。在缺省情况下，为1s。</li></ul><p><strong>输出序列：</strong> 输出单个序列，类型为DOUBLE。该序列是一个等距时间序列，它的值是将两个输入序列依次作为实部和虚部进行逆快速傅里叶变换的结果。</p><p><strong>提示：</strong> 如果某行数据中包含空值或<code>NaN</code>，该行数据将会被忽略。</p><h4 id="使用示例-5" tabindex="-1"><a class="header-anchor" href="#使用示例-5"><span>使用示例</span></a></h4><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+----------------------+----------------------+</span>
<span class="line">|                         Time|       root.test.d1.re|       root.test.d1.im|</span>
<span class="line">+-----------------------------+----------------------+----------------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|                   0.0|                   0.0|</span>
<span class="line">|1970-01-01T08:00:00.001+08:00| -3.932894010461041E-9| 1.2104201863039066E-8|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|-1.4021739447490164E-7| 1.9299268669082926E-7|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00| -7.057291240286645E-8|  5.127422242345858E-8|</span>
<span class="line">|1970-01-01T08:00:00.004+08:00|    19.021130288047125|    -6.180339875198807|</span>
<span class="line">|1970-01-01T08:00:00.005+08:00|     9.999999850988388| 3.501852745067114E-16|</span>
<span class="line">|1970-01-01T08:00:00.019+08:00| -3.932894898639461E-9|-1.2104202549376264E-8|</span>
<span class="line">+-----------------------------+----------------------+----------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的SQL语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> ifft<span class="token punctuation">(</span>re<span class="token punctuation">,</span> im<span class="token punctuation">,</span> <span class="token string">&#39;interval&#39;</span><span class="token operator">=</span><span class="token string">&#39;1m&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;start&#39;</span><span class="token operator">=</span><span class="token string">&#39;2021-01-01 00:00:00&#39;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------------------------------+</span>
<span class="line">|                         Time|ifft(root.test.d1.re, root.test.d1.im, &quot;interval&quot;=&quot;1m&quot;,|</span>
<span class="line">|                             |                         &quot;start&quot;=&quot;2021-01-01 00:00:00&quot;)|</span>
<span class="line">+-----------------------------+-------------------------------------------------------+</span>
<span class="line">|2021-01-01T00:00:00.000+08:00|                                      2.902112992431231|</span>
<span class="line">|2021-01-01T00:01:00.000+08:00|                                     1.1755704705132448|</span>
<span class="line">|2021-01-01T00:02:00.000+08:00|                                     -2.175570513757101|</span>
<span class="line">|2021-01-01T00:03:00.000+08:00|                                    -1.9021130389094498|</span>
<span class="line">|2021-01-01T00:04:00.000+08:00|                                     0.9999999925494194|</span>
<span class="line">|2021-01-01T00:05:00.000+08:00|                                      1.902113046743454|</span>
<span class="line">|2021-01-01T00:06:00.000+08:00|                                    0.17557053610884188|</span>
<span class="line">|2021-01-01T00:07:00.000+08:00|                                    -1.1755704886020932|</span>
<span class="line">|2021-01-01T00:08:00.000+08:00|                                    -0.9021130371347148|</span>
<span class="line">|2021-01-01T00:09:00.000+08:00|                                  3.552713678800501E-16|</span>
<span class="line">|2021-01-01T00:10:00.000+08:00|                                     0.9021130371347154|</span>
<span class="line">|2021-01-01T00:11:00.000+08:00|                                     1.1755704886020932|</span>
<span class="line">|2021-01-01T00:12:00.000+08:00|                                   -0.17557053610884144|</span>
<span class="line">|2021-01-01T00:13:00.000+08:00|                                     -1.902113046743454|</span>
<span class="line">|2021-01-01T00:14:00.000+08:00|                                    -0.9999999925494196|</span>
<span class="line">|2021-01-01T00:15:00.000+08:00|                                     1.9021130389094498|</span>
<span class="line">|2021-01-01T00:16:00.000+08:00|                                     2.1755705137571004|</span>
<span class="line">|2021-01-01T00:17:00.000+08:00|                                    -1.1755704705132448|</span>
<span class="line">|2021-01-01T00:18:00.000+08:00|                                     -2.902112992431231|</span>
<span class="line">|2021-01-01T00:19:00.000+08:00|                                 -3.552713678800501E-16|</span>
<span class="line">+-----------------------------+-------------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lowpass" tabindex="-1"><a class="header-anchor" href="#lowpass"><span>LowPass</span></a></h3><h4 id="函数简介-6" tabindex="-1"><a class="header-anchor" href="#函数简介-6"><span>函数简介</span></a></h4><p>本函数对输入序列进行低通滤波，提取低于截止频率的分量。输入序列的时间戳将被忽略，所有数据点都将被视作等距的。</p><p><strong>函数名：</strong> LOWPASS</p><p><strong>输入序列：</strong> 仅支持单个输入序列，类型为 INT32 / INT64 / FLOAT / DOUBLE</p><p><strong>参数：</strong></p><ul><li><code>wpass</code>：归一化后的截止频率，取值为(0,1)，不可缺省。</li></ul><p><strong>输出序列：</strong> 输出单个序列，类型为DOUBLE，它是滤波后的序列，长度与时间戳均与输入一致。</p><p><strong>提示：</strong> 输入序列中的<code>NaN</code>将被忽略。</p><h4 id="使用示例-6" tabindex="-1"><a class="header-anchor" href="#使用示例-6"><span>使用示例</span></a></h4><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+---------------+</span>
<span class="line">|                         Time|root.test.d1.s1|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|       2.902113|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|      1.1755705|</span>
<span class="line">|1970-01-01T08:00:02.000+08:00|     -2.1755705|</span>
<span class="line">|1970-01-01T08:00:03.000+08:00|     -1.9021131|</span>
<span class="line">|1970-01-01T08:00:04.000+08:00|            1.0|</span>
<span class="line">|1970-01-01T08:00:05.000+08:00|      1.9021131|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|      0.1755705|</span>
<span class="line">|1970-01-01T08:00:07.000+08:00|     -1.1755705|</span>
<span class="line">|1970-01-01T08:00:08.000+08:00|      -0.902113|</span>
<span class="line">|1970-01-01T08:00:09.000+08:00|            0.0|</span>
<span class="line">|1970-01-01T08:00:10.000+08:00|       0.902113|</span>
<span class="line">|1970-01-01T08:00:11.000+08:00|      1.1755705|</span>
<span class="line">|1970-01-01T08:00:12.000+08:00|     -0.1755705|</span>
<span class="line">|1970-01-01T08:00:13.000+08:00|     -1.9021131|</span>
<span class="line">|1970-01-01T08:00:14.000+08:00|           -1.0|</span>
<span class="line">|1970-01-01T08:00:15.000+08:00|      1.9021131|</span>
<span class="line">|1970-01-01T08:00:16.000+08:00|      2.1755705|</span>
<span class="line">|1970-01-01T08:00:17.000+08:00|     -1.1755705|</span>
<span class="line">|1970-01-01T08:00:18.000+08:00|      -2.902113|</span>
<span class="line">|1970-01-01T08:00:19.000+08:00|            0.0|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的SQL语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> lowpass<span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token string">&#39;wpass&#39;</span><span class="token operator">=</span><span class="token string">&#39;0.45&#39;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+----------------------------------------+</span>
<span class="line">|                         Time|lowpass(root.test.d1.s1, &quot;wpass&quot;=&quot;0.45&quot;)|</span>
<span class="line">+-----------------------------+----------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|                      1.9021130073323922|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|                      1.1755704705132448|</span>
<span class="line">|1970-01-01T08:00:02.000+08:00|                     -1.1755705286582614|</span>
<span class="line">|1970-01-01T08:00:03.000+08:00|                     -1.9021130389094498|</span>
<span class="line">|1970-01-01T08:00:04.000+08:00|                    7.450580419288145E-9|</span>
<span class="line">|1970-01-01T08:00:05.000+08:00|                       1.902113046743454|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|                      1.1755705212076808|</span>
<span class="line">|1970-01-01T08:00:07.000+08:00|                     -1.1755704886020932|</span>
<span class="line">|1970-01-01T08:00:08.000+08:00|                     -1.9021130222335536|</span>
<span class="line">|1970-01-01T08:00:09.000+08:00|                   3.552713678800501E-16|</span>
<span class="line">|1970-01-01T08:00:10.000+08:00|                      1.9021130222335536|</span>
<span class="line">|1970-01-01T08:00:11.000+08:00|                      1.1755704886020932|</span>
<span class="line">|1970-01-01T08:00:12.000+08:00|                     -1.1755705212076801|</span>
<span class="line">|1970-01-01T08:00:13.000+08:00|                      -1.902113046743454|</span>
<span class="line">|1970-01-01T08:00:14.000+08:00|                    -7.45058112983088E-9|</span>
<span class="line">|1970-01-01T08:00:15.000+08:00|                      1.9021130389094498|</span>
<span class="line">|1970-01-01T08:00:16.000+08:00|                      1.1755705286582616|</span>
<span class="line">|1970-01-01T08:00:17.000+08:00|                     -1.1755704705132448|</span>
<span class="line">|1970-01-01T08:00:18.000+08:00|                     -1.9021130073323924|</span>
<span class="line">|1970-01-01T08:00:19.000+08:00|                  -2.664535259100376E-16|</span>
<span class="line">+-----------------------------+----------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：输入序列服从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>t</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>t</mi><mi mathvariant="normal">/</mi><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=sin(2\\pi t/4)+2sin(2\\pi t/5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">t</span><span class="mord">/4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">t</span><span class="mord">/5</span><span class="mclose">)</span></span></span></span>，长度为20，因此低通滤波之后的输出序列服从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>2</mn><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>t</mi><mi mathvariant="normal">/</mi><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=2sin(2\\pi t/5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">t</span><span class="mord">/5</span><span class="mclose">)</span></span></span></span>。</p>`,130)]))}const r=n(l,[["render",p],["__file","Frequency-Domain.html.vue"]]),d=JSON.parse('{"path":"/zh/UserGuide/V0.13.x/UDF-Library/Frequency-Domain.html","title":"","lang":"zh-CN","frontmatter":{"description":"频域分析 Conv 函数简介 本函数对两个输入序列进行卷积，即多项式乘法。 函数名： CONV 输入序列： 仅支持两个输入序列，类型均为 INT32 / INT64 / FLOAT / DOUBLE 输出序列： 输出单个序列，类型为DOUBLE，它是两个序列卷积的结果。序列的时间戳从0开始，仅用于表示顺序。 提示： 输入序列中的NaN将被忽略。 使用示...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://iotdb.apache.org/UserGuide/V0.13.x/UDF-Library/Frequency-Domain.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/zh/UserGuide/V0.13.x/UDF-Library/Frequency-Domain.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:description","content":"频域分析 Conv 函数简介 本函数对两个输入序列进行卷积，即多项式乘法。 函数名： CONV 输入序列： 仅支持两个输入序列，类型均为 INT32 / INT64 / FLOAT / DOUBLE 输出序列： 输出单个序列，类型为DOUBLE，它是两个序列卷积的结果。序列的时间戳从0开始，仅用于表示顺序。 提示： 输入序列中的NaN将被忽略。 使用示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-07-10T03:11:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-10T03:11:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-10T03:11:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"频域分析","slug":"频域分析","link":"#频域分析","children":[{"level":3,"title":"Conv","slug":"conv","link":"#conv","children":[]},{"level":3,"title":"Deconv","slug":"deconv","link":"#deconv","children":[]},{"level":3,"title":"DWT","slug":"dwt","link":"#dwt","children":[]},{"level":3,"title":"FFT","slug":"fft","link":"#fft","children":[]},{"level":3,"title":"HighPass","slug":"highpass","link":"#highpass","children":[]},{"level":3,"title":"IFFT","slug":"ifft","link":"#ifft","children":[]},{"level":3,"title":"LowPass","slug":"lowpass","link":"#lowpass","children":[]}]}],"git":{"createdTime":1688958677000,"updatedTime":1688958677000,"contributors":[{"name":"CritasWang","email":"critas@outlook.com","commits":1}]},"readingTime":{"minutes":12.62,"words":3786},"filePathRelative":"zh/UserGuide/V0.13.x/UDF-Library/Frequency-Domain.md","localizedDate":"2023年7月10日","autoDesc":true}');export{r as comp,d as data};
