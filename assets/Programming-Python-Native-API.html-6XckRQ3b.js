import{_ as s,c as a,b as e,o as t}from"./app-BHE9oQwv.js";const p={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="python-native-api" tabindex="-1"><a class="header-anchor" href="#python-native-api"><span>Python Native API</span></a></h1><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements"><span>Requirements</span></a></h2><p>You have to install thrift (&gt;=0.13) before using the package.</p><h2 id="how-to-use-example" tabindex="-1"><a class="header-anchor" href="#how-to-use-example"><span>How to use (Example)</span></a></h2><p>First, download the package: <code>pip3 install apache-iotdb</code></p><p>You can get an example of using the package to read and write data at here: <a href="https://github.com/apache/iotdb/blob/master/iotdb-client/client-py/SessionExample.py" target="_blank" rel="noopener noreferrer">Example</a></p><p>An example of aligned timeseries: <a href="https://github.com/apache/iotdb/blob/master/iotdb-client/client-py/SessionAlignedTimeseriesExample.py" target="_blank" rel="noopener noreferrer">Aligned Timeseries Session Example</a></p><p>(you need to add <code>import iotdb</code> in the head of the file)</p><p>Or:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> iotdb<span class="token punctuation">.</span>Session <span class="token keyword">import</span> Session</span>
<span class="line"></span>
<span class="line">ip <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="line">port_ <span class="token operator">=</span> <span class="token string">&quot;6667&quot;</span></span>
<span class="line">username_ <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span></span>
<span class="line">password_ <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span></span>
<span class="line">session <span class="token operator">=</span> Session<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port_<span class="token punctuation">,</span> username_<span class="token punctuation">,</span> password_<span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">zone <span class="token operator">=</span> session<span class="token punctuation">.</span>get_time_zone<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization"><span>Initialization</span></a></h2><ul><li>Initialize a Session</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session <span class="token operator">=</span> Session<span class="token punctuation">(</span></span>
<span class="line">    ip<span class="token operator">=</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    port<span class="token operator">=</span><span class="token string">&quot;6667&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    user<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    password<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    fetch_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span></span>
<span class="line">    zone_id<span class="token operator">=</span><span class="token string">&quot;UTC+8&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    enable_redirection<span class="token operator">=</span><span class="token boolean">True</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Initialize a Session to connect multiple nodes</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session <span class="token operator">=</span> Session<span class="token punctuation">.</span>init_from_node_urls<span class="token punctuation">(</span></span>
<span class="line">    node_urls<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;127.0.0.1:6667&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1:6668&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1:6669&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    user<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    password<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    fetch_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span></span>
<span class="line">    zone_id<span class="token operator">=</span><span class="token string">&quot;UTC+8&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    enable_redirection<span class="token operator">=</span><span class="token boolean">True</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Open a session, with a parameter to specify whether to enable RPC compression</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>enable_rpc_compression<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Notice: this RPC compression status of client must comply with that of IoTDB server</p><ul><li>Close a Session</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="managing-session-through-sessionpool" tabindex="-1"><a class="header-anchor" href="#managing-session-through-sessionpool"><span>Managing Session through SessionPool</span></a></h2><p>Utilizing SessionPool to manage sessions eliminates the need to worry about session reuse. When the number of session connections reaches the maximum capacity of the pool, requests for acquiring a session will be blocked, and you can set the blocking wait time through parameters. After using a session, it should be returned to the SessionPool using the <code>putBack</code> method for proper management.</p><h3 id="create-sessionpool" tabindex="-1"><a class="header-anchor" href="#create-sessionpool"><span>Create SessionPool</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pool_config <span class="token operator">=</span> PoolConfig<span class="token punctuation">(</span>host<span class="token operator">=</span>ip<span class="token punctuation">,</span>port<span class="token operator">=</span>port<span class="token punctuation">,</span> user_name<span class="token operator">=</span>username<span class="token punctuation">,</span></span>
<span class="line">                         password<span class="token operator">=</span>password<span class="token punctuation">,</span> fetch_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span></span>
<span class="line">                         time_zone<span class="token operator">=</span><span class="token string">&quot;UTC+8&quot;</span><span class="token punctuation">,</span> max_retry<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">max_pool_size <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">wait_timeout_in_ms <span class="token operator">=</span> <span class="token number">3000</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># # Create the connection pool</span></span>
<span class="line">session_pool <span class="token operator">=</span> SessionPool<span class="token punctuation">(</span>pool_config<span class="token punctuation">,</span> max_pool_size<span class="token punctuation">,</span> wait_timeout_in_ms<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-a-sessionpool-using-distributed-nodes" tabindex="-1"><a class="header-anchor" href="#create-a-sessionpool-using-distributed-nodes"><span>Create a SessionPool using distributed nodes.</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pool_config <span class="token operator">=</span> PoolConfig<span class="token punctuation">(</span>node_urls<span class="token operator">=</span>node_urls<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;127.0.0.1:6667&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1:6668&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1:6669&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> user_name<span class="token operator">=</span>username<span class="token punctuation">,</span></span>
<span class="line">                         password<span class="token operator">=</span>password<span class="token punctuation">,</span> fetch_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span></span>
<span class="line">                         time_zone<span class="token operator">=</span><span class="token string">&quot;UTC+8&quot;</span><span class="token punctuation">,</span> max_retry<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">max_pool_size <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">wait_timeout_in_ms <span class="token operator">=</span> <span class="token number">3000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="acquiring-a-session-through-sessionpool-and-manually-calling-putback-after-use" tabindex="-1"><a class="header-anchor" href="#acquiring-a-session-through-sessionpool-and-manually-calling-putback-after-use"><span>Acquiring a session through SessionPool and manually calling PutBack after use</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session <span class="token operator">=</span> session_pool<span class="token punctuation">.</span>get_session<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span>set_storage_group<span class="token punctuation">(</span>STORAGE_GROUP_NAME<span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span>create_time_series<span class="token punctuation">(</span></span>
<span class="line">  TIMESERIES_PATH<span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>BOOLEAN<span class="token punctuation">,</span> TSEncoding<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span> Compressor<span class="token punctuation">.</span>SNAPPY</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># After usage, return the session using putBack</span></span>
<span class="line">session_pool<span class="token punctuation">.</span>put_back<span class="token punctuation">(</span>session<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># When closing the sessionPool, all managed sessions will be closed as well</span></span>
<span class="line">session_pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="data-definition-interface-ddl-interface" tabindex="-1"><a class="header-anchor" href="#data-definition-interface-ddl-interface"><span>Data Definition Interface (DDL Interface)</span></a></h2><h3 id="database-management" tabindex="-1"><a class="header-anchor" href="#database-management"><span>Database Management</span></a></h3><ul><li>CREATE DATABASE</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>set_storage_group<span class="token punctuation">(</span>group_name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Delete one or several databases</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>delete_storage_group<span class="token punctuation">(</span>group_name<span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span>delete_storage_groups<span class="token punctuation">(</span>group_name_lst<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timeseries-management" tabindex="-1"><a class="header-anchor" href="#timeseries-management"><span>Timeseries Management</span></a></h3><ul><li>Create one or multiple timeseries</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>create_time_series<span class="token punctuation">(</span>ts_path<span class="token punctuation">,</span> data_type<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> compressor<span class="token punctuation">,</span></span>
<span class="line">    props<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> tags<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> attributes<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> alias<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></span>
<span class="line">      </span>
<span class="line">session<span class="token punctuation">.</span>create_multi_time_series<span class="token punctuation">(</span></span>
<span class="line">    ts_path_lst<span class="token punctuation">,</span> data_type_lst<span class="token punctuation">,</span> encoding_lst<span class="token punctuation">,</span> compressor_lst<span class="token punctuation">,</span></span>
<span class="line">    props_lst<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> tags_lst<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> attributes_lst<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> alias_lst<span class="token operator">=</span><span class="token boolean">None</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Create aligned timeseries</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>create_aligned_time_series<span class="token punctuation">(</span></span>
<span class="line">    device_id<span class="token punctuation">,</span> measurements_lst<span class="token punctuation">,</span> data_type_lst<span class="token punctuation">,</span> encoding_lst<span class="token punctuation">,</span> compressor_lst</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Attention: Alias of measurements are <strong>not supported</strong> currently.</p><ul><li>Delete one or several timeseries</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>delete_time_series<span class="token punctuation">(</span>paths_list<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Check whether the specific timeseries exists</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>check_time_series_exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="data-manipulation-interface-dml-interface" tabindex="-1"><a class="header-anchor" href="#data-manipulation-interface-dml-interface"><span>Data Manipulation Interface (DML Interface)</span></a></h2><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h3><p>It is recommended to use insertTablet to help improve write efficiency.</p><ul><li>Insert a Tablet，which is multiple rows of a device, each row has the same measurements <ul><li><strong>Better Write Performance</strong></li><li><strong>Support null values</strong>: fill the null value with any value, and then mark the null value via BitMap (from v0.13)</li></ul></li></ul><p>We have two implementations of Tablet in Python API.</p><ul><li>Normal Tablet</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">values_ <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">10011.1</span><span class="token punctuation">,</span> <span class="token string">&quot;test01&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">11111</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">101.0</span><span class="token punctuation">,</span> <span class="token string">&quot;test02&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">188.1</span><span class="token punctuation">,</span> <span class="token number">688.25</span><span class="token punctuation">,</span> <span class="token string">&quot;test03&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6.25</span><span class="token punctuation">,</span> <span class="token string">&quot;test04&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line">timestamps_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">tablet_ <span class="token operator">=</span> Tablet<span class="token punctuation">(</span></span>
<span class="line">    device_id<span class="token punctuation">,</span> measurements_<span class="token punctuation">,</span> data_types_<span class="token punctuation">,</span> values_<span class="token punctuation">,</span> timestamps_</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span>insert_tablet<span class="token punctuation">(</span>tablet_<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">values_ <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">10011.1</span><span class="token punctuation">,</span> <span class="token string">&quot;test01&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">11111</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">101.0</span><span class="token punctuation">,</span> <span class="token string">&quot;test02&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">188.1</span><span class="token punctuation">,</span> <span class="token number">688.25</span><span class="token punctuation">,</span> <span class="token string">&quot;test03&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line">timestamps_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span></span>
<span class="line">tablet_ <span class="token operator">=</span> Tablet<span class="token punctuation">(</span></span>
<span class="line">    device_id<span class="token punctuation">,</span> measurements_<span class="token punctuation">,</span> data_types_<span class="token punctuation">,</span> values_<span class="token punctuation">,</span> timestamps_</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span>insert_tablet<span class="token punctuation">(</span>tablet_<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Numpy Tablet</li></ul><p>Comparing with Tablet, Numpy Tablet is using <a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html" target="_blank" rel="noopener noreferrer">numpy.ndarray</a> to record data.<br> With less memory footprint and time cost of serialization, the insert performance will be better.</p><p><strong>Notice</strong></p><ol><li>time and numerical value columns in Tablet is ndarray</li><li>recommended to use the specific dtypes to each ndarray, see the example below<br> (if not, the default dtypes are also ok).</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line">data_types_ <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    TSDataType<span class="token punctuation">.</span>BOOLEAN<span class="token punctuation">,</span></span>
<span class="line">    TSDataType<span class="token punctuation">.</span>INT32<span class="token punctuation">,</span></span>
<span class="line">    TSDataType<span class="token punctuation">.</span>INT64<span class="token punctuation">,</span></span>
<span class="line">    TSDataType<span class="token punctuation">.</span>FLOAT<span class="token punctuation">,</span></span>
<span class="line">    TSDataType<span class="token punctuation">.</span>DOUBLE<span class="token punctuation">,</span></span>
<span class="line">    TSDataType<span class="token punctuation">.</span>TEXT<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line">np_values_ <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>BOOLEAN<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>INT32<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11111</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>INT64<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">188.1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>FLOAT<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10011.1</span><span class="token punctuation">,</span> <span class="token number">101.0</span><span class="token punctuation">,</span> <span class="token number">688.25</span><span class="token punctuation">,</span> <span class="token number">6.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>DOUBLE<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;test01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test02&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test03&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test04&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>TEXT<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line">np_timestamps_ <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>INT64<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">np_tablet_ <span class="token operator">=</span> NumpyTablet<span class="token punctuation">(</span></span>
<span class="line">  device_id<span class="token punctuation">,</span> measurements_<span class="token punctuation">,</span> data_types_<span class="token punctuation">,</span> np_values_<span class="token punctuation">,</span> np_timestamps_</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span>insert_tablet<span class="token punctuation">(</span>np_tablet_<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># insert one numpy tablet with None into the database.</span></span>
<span class="line">np_values_ <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>BOOLEAN<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>INT32<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11111</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>INT64<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">188.1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>FLOAT<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10011.1</span><span class="token punctuation">,</span> <span class="token number">101.0</span><span class="token punctuation">,</span> <span class="token number">688.25</span><span class="token punctuation">,</span> <span class="token number">6.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>DOUBLE<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;test01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test02&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test03&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test04&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>TEXT<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line">np_timestamps_ <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>INT64<span class="token punctuation">.</span>np_dtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">np_bitmaps_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>measurements_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    np_bitmaps_<span class="token punctuation">.</span>append<span class="token punctuation">(</span>BitMap<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>np_timestamps_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">np_bitmaps_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mark<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">np_bitmaps_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mark<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">np_bitmaps_<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mark<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">np_bitmaps_<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mark<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">np_bitmaps_<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mark<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">np_tablet_with_none <span class="token operator">=</span> NumpyTablet<span class="token punctuation">(</span></span>
<span class="line">    device_id<span class="token punctuation">,</span> measurements_<span class="token punctuation">,</span> data_types_<span class="token punctuation">,</span> np_values_<span class="token punctuation">,</span> np_timestamps_<span class="token punctuation">,</span> np_bitmaps_</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span>insert_tablet<span class="token punctuation">(</span>np_tablet_with_none<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Insert multiple Tablets</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>insert_tablets<span class="token punctuation">(</span>tablet_lst<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Insert a Record</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>insert_record<span class="token punctuation">(</span>device_id<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> measurements_<span class="token punctuation">,</span> data_types_<span class="token punctuation">,</span> values_<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Insert multiple Records</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>insert_records<span class="token punctuation">(</span></span>
<span class="line">    device_ids_<span class="token punctuation">,</span> time_list_<span class="token punctuation">,</span> measurements_list_<span class="token punctuation">,</span> data_type_list_<span class="token punctuation">,</span> values_list_</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Insert multiple Records that belong to the same device.<br> With type info the server has no need to do type inference, which leads a better performance</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>insert_records_of_one_device<span class="token punctuation">(</span>device_id<span class="token punctuation">,</span> time_list<span class="token punctuation">,</span> measurements_list<span class="token punctuation">,</span> data_types_list<span class="token punctuation">,</span> values_list<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="insert-with-type-inference" tabindex="-1"><a class="header-anchor" href="#insert-with-type-inference"><span>Insert with type inference</span></a></h3><p>When the data is of String type, we can use the following interface to perform type inference based on the value of the value itself. For example, if value is &quot;true&quot; , it can be automatically inferred to be a boolean type. If value is &quot;3.2&quot; , it can be automatically inferred as a flout type. Without type information, server has to do type inference, which may cost some time.</p><ul><li>Insert a Record, which contains multiple measurement value of a device at a timestamp</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>insert_str_record<span class="token punctuation">(</span>device_id<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> measurements<span class="token punctuation">,</span> string_values<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="insert-of-aligned-timeseries" tabindex="-1"><a class="header-anchor" href="#insert-of-aligned-timeseries"><span>Insert of Aligned Timeseries</span></a></h3><p>The Insert of aligned timeseries uses interfaces like insert_aligned_XXX, and others are similar to the above interfaces:</p><ul><li>insert_aligned_record</li><li>insert_aligned_records</li><li>insert_aligned_records_of_one_device</li><li>insert_aligned_tablet</li><li>insert_aligned_tablets</li></ul><h2 id="iotdb-sql-interface" tabindex="-1"><a class="header-anchor" href="#iotdb-sql-interface"><span>IoTDB-SQL Interface</span></a></h2><ul><li>Execute query statement</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>execute_query_statement<span class="token punctuation">(</span>sql<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Execute non query statement</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>execute_non_query_statement<span class="token punctuation">(</span>sql<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Execute statement</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>execute_statement<span class="token punctuation">(</span>sql<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="schema-template" tabindex="-1"><a class="header-anchor" href="#schema-template"><span>Schema Template</span></a></h2><h3 id="create-schema-template" tabindex="-1"><a class="header-anchor" href="#create-schema-template"><span>Create Schema Template</span></a></h3><p>The step for creating a metadata template is as follows</p><ol><li>Create the template class</li><li>Adding MeasurementNode</li><li>Execute create schema template function</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">template <span class="token operator">=</span> Template<span class="token punctuation">(</span>name<span class="token operator">=</span>template_name<span class="token punctuation">,</span> share_time<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">m_node_x <span class="token operator">=</span> MeasurementNode<span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>FLOAT<span class="token punctuation">,</span> TSEncoding<span class="token punctuation">.</span>RLE<span class="token punctuation">,</span> Compressor<span class="token punctuation">.</span>SNAPPY<span class="token punctuation">)</span></span>
<span class="line">m_node_y <span class="token operator">=</span> MeasurementNode<span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>FLOAT<span class="token punctuation">,</span> TSEncoding<span class="token punctuation">.</span>RLE<span class="token punctuation">,</span> Compressor<span class="token punctuation">.</span>SNAPPY<span class="token punctuation">)</span></span>
<span class="line">m_node_z <span class="token operator">=</span> MeasurementNode<span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">,</span> TSDataType<span class="token punctuation">.</span>FLOAT<span class="token punctuation">,</span> TSEncoding<span class="token punctuation">.</span>RLE<span class="token punctuation">,</span> Compressor<span class="token punctuation">.</span>SNAPPY<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">template<span class="token punctuation">.</span>add_template<span class="token punctuation">(</span>m_node_x<span class="token punctuation">)</span></span>
<span class="line">template<span class="token punctuation">.</span>add_template<span class="token punctuation">(</span>m_node_y<span class="token punctuation">)</span></span>
<span class="line">template<span class="token punctuation">.</span>add_template<span class="token punctuation">(</span>m_node_z<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">session<span class="token punctuation">.</span>create_schema_template<span class="token punctuation">(</span>template<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modify-schema-template-measurements" tabindex="-1"><a class="header-anchor" href="#modify-schema-template-measurements"><span>Modify Schema Template measurements</span></a></h3><p>Modify measurements in a template, the template must be already created. These are functions that add or delete some measurement nodes.</p><ul><li>add node in template</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>add_measurements_in_template<span class="token punctuation">(</span>template_name<span class="token punctuation">,</span> measurements_path<span class="token punctuation">,</span> data_types<span class="token punctuation">,</span> encodings<span class="token punctuation">,</span> compressors<span class="token punctuation">,</span> is_aligned<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>delete node in template</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>delete_node_in_template<span class="token punctuation">(</span>template_name<span class="token punctuation">,</span> path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="set-schema-template" tabindex="-1"><a class="header-anchor" href="#set-schema-template"><span>Set Schema Template</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>set_schema_template<span class="token punctuation">(</span>template_name<span class="token punctuation">,</span> prefix_path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="uset-schema-template" tabindex="-1"><a class="header-anchor" href="#uset-schema-template"><span>Uset Schema Template</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>unset_schema_template<span class="token punctuation">(</span>template_name<span class="token punctuation">,</span> prefix_path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="show-schema-template" tabindex="-1"><a class="header-anchor" href="#show-schema-template"><span>Show Schema Template</span></a></h3><ul><li>Show all schema templates</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>show_all_templates<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Count all measurements in templates</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>count_measurements_in_template<span class="token punctuation">(</span>template_name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Judge whether the path is measurement or not in templates, This measurement must be in the template</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>count_measurements_in_template<span class="token punctuation">(</span>template_name<span class="token punctuation">,</span> path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Judge whether the path is exist or not in templates, This path may not belong to the template</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>is_path_exist_in_template<span class="token punctuation">(</span>template_name<span class="token punctuation">,</span> path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Show nodes under in schema template</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>show_measurements_in_template<span class="token punctuation">(</span>template_name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Show the path prefix where a schema template is set</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>show_paths_template_set_on<span class="token punctuation">(</span>template_name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Show the path prefix where a schema template is used (i.e. the time series has been created)</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>show_paths_template_using_on<span class="token punctuation">(</span>template_name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="drop-schema-template" tabindex="-1"><a class="header-anchor" href="#drop-schema-template"><span>Drop Schema Template</span></a></h3><p>Delete an existing metadata template，dropping an already set template is not supported</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">session<span class="token punctuation">.</span>drop_schema_template<span class="token punctuation">(</span><span class="token string">&quot;template_python&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="pandas-support" tabindex="-1"><a class="header-anchor" href="#pandas-support"><span>Pandas Support</span></a></h2><p>To easily transform a query result to a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html" target="_blank" rel="noopener noreferrer">Pandas Dataframe</a><br> the SessionDataSet has a method <code>.todf()</code> which consumes the dataset and transforms it to a pandas dataframe.</p><p>Example:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> iotdb<span class="token punctuation">.</span>Session <span class="token keyword">import</span> Session</span>
<span class="line"></span>
<span class="line">ip <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="line">port_ <span class="token operator">=</span> <span class="token string">&quot;6667&quot;</span></span>
<span class="line">username_ <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span></span>
<span class="line">password_ <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span></span>
<span class="line">session <span class="token operator">=</span> Session<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port_<span class="token punctuation">,</span> username_<span class="token punctuation">,</span> password_<span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">result <span class="token operator">=</span> session<span class="token punctuation">.</span>execute_query_statement<span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM root.*&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Transform to Pandas Dataset</span></span>
<span class="line">df <span class="token operator">=</span> result<span class="token punctuation">.</span>todf<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Now you can work with the dataframe</span></span>
<span class="line">df <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iotdb-testcontainer" tabindex="-1"><a class="header-anchor" href="#iotdb-testcontainer"><span>IoTDB Testcontainer</span></a></h2><p>The Test Support is based on the lib <code>testcontainers</code> (<a href="https://testcontainers-python.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener noreferrer">https://testcontainers-python.readthedocs.io/en/latest/index.html</a>) which you need to install in your project if you want to use the feature.</p><p>To start (and stop) an IoTDB Database in a Docker container simply do:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyTestCase</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">test_something</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">with</span> IoTDBContainer<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span></span>
<span class="line">            session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>get_exposed_port<span class="token punctuation">(</span><span class="token number">6667</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            session<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">            result <span class="token operator">=</span> session<span class="token punctuation">.</span>execute_query_statement<span class="token punctuation">(</span><span class="token string">&quot;SHOW TIMESERIES&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">            session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>by default it will load the image <code>apache/iotdb:latest</code>, if you want a specific version just pass it like e.g. <code>IoTDBContainer(&quot;apache/iotdb:0.12.0&quot;)</code> to get version <code>0.12.0</code> running.</p><h2 id="iotdb-dbapi" tabindex="-1"><a class="header-anchor" href="#iotdb-dbapi"><span>IoTDB DBAPI</span></a></h2><p>IoTDB DBAPI implements the Python DB API 2.0 specification (<a href="https://peps.python.org/pep-0249/" target="_blank" rel="noopener noreferrer">https://peps.python.org/pep-0249/</a>), which defines a common<br> interface for accessing databases in Python.</p><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h3><ul><li>Initialization</li></ul><p>The initialized parameters are consistent with the session part (except for the sqlalchemy_mode).</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> iotdb<span class="token punctuation">.</span>dbapi <span class="token keyword">import</span> connect</span>
<span class="line"></span>
<span class="line">ip <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="line">port_ <span class="token operator">=</span> <span class="token string">&quot;6667&quot;</span></span>
<span class="line">username_ <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span></span>
<span class="line">password_ <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span></span>
<span class="line">conn <span class="token operator">=</span> connect<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port_<span class="token punctuation">,</span> username_<span class="token punctuation">,</span> password_<span class="token punctuation">,</span>fetch_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span>zone_id<span class="token operator">=</span><span class="token string">&quot;UTC+8&quot;</span><span class="token punctuation">,</span>sqlalchemy_mode<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>simple SQL statement execution</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT ** FROM root&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>execute SQL with parameter</li></ul><p>IoTDB DBAPI supports pyformat style parameters</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT ** FROM root WHERE time &lt; %(time)s&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;2017-11-01T00:08:00.000&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>execute SQL with parameter sequences</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">seq_of_parameters <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;temperature&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;temperature&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;temperature&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;temperature&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;temperature&quot;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line">sql <span class="token operator">=</span> <span class="token string">&quot;insert into root.cursor(timestamp,temperature) values(%(timestamp)s,%(temperature)s)&quot;</span></span>
<span class="line">cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>sql<span class="token punctuation">,</span>seq_of_parameters<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>close the connection and cursor</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iotdb-sqlalchemy-dialect-experimental" tabindex="-1"><a class="header-anchor" href="#iotdb-sqlalchemy-dialect-experimental"><span>IoTDB SQLAlchemy Dialect (Experimental)</span></a></h2><p>The SQLAlchemy dialect of IoTDB is written to adapt to Apache Superset.<br> This part is still being improved.<br> Please do not use it in the production environment!</p><h3 id="mapping-of-the-metadata" tabindex="-1"><a class="header-anchor" href="#mapping-of-the-metadata"><span>Mapping of the metadata</span></a></h3><p>The data model used by SQLAlchemy is a relational data model, which describes the relationships between different entities through tables.<br> While the data model of IoTDB is a hierarchical data model, which organizes the data through a tree structure.<br> In order to adapt IoTDB to the dialect of SQLAlchemy, the original data model in IoTDB needs to be reorganized.<br> Converting the data model of IoTDB into the data model of SQLAlchemy.</p><p>The metadata in the IoTDB are：</p><ol><li>Database</li><li>Path</li><li>Entity</li><li>Measurement</li></ol><p>The metadata in the SQLAlchemy are：</p><ol><li>Schema</li><li>Table</li><li>Column</li></ol><p>The mapping relationship between them is：</p><table><thead><tr><th>The metadata in the SQLAlchemy</th><th>The metadata in the IoTDB</th></tr></thead><tbody><tr><td>Schema</td><td>Database</td></tr><tr><td>Table</td><td>Path ( from database to entity ) + Entity</td></tr><tr><td>Column</td><td>Measurement</td></tr></tbody></table><p>The following figure shows the relationship between the two more intuitively:</p><figure><img src="https://alioss.timecho.com/docs/img/UserGuide/API/IoTDB-SQLAlchemy/sqlalchemy-to-iotdb.png?raw=true" alt="sqlalchemy-to-iotdb" tabindex="0" loading="lazy"><figcaption>sqlalchemy-to-iotdb</figcaption></figure><h3 id="data-type-mapping" tabindex="-1"><a class="header-anchor" href="#data-type-mapping"><span>Data type mapping</span></a></h3><table><thead><tr><th>data type in IoTDB</th><th>data type in SQLAlchemy</th></tr></thead><tbody><tr><td>BOOLEAN</td><td>Boolean</td></tr><tr><td>INT32</td><td>Integer</td></tr><tr><td>INT64</td><td>BigInteger</td></tr><tr><td>FLOAT</td><td>Float</td></tr><tr><td>DOUBLE</td><td>Float</td></tr><tr><td>TEXT</td><td>Text</td></tr><tr><td>LONG</td><td>BigInteger</td></tr></tbody></table><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><ul><li>execute statement</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine</span>
<span class="line"></span>
<span class="line">engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&quot;iotdb://root:root@127.0.0.1:6667&quot;</span><span class="token punctuation">)</span></span>
<span class="line">connect <span class="token operator">=</span> engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">result <span class="token operator">=</span> connect<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT ** FROM root&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> row <span class="token keyword">in</span> result<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ORM (now only simple queries are supported)</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> Float<span class="token punctuation">,</span> BigInteger<span class="token punctuation">,</span> MetaData</span>
<span class="line"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base</span>
<span class="line"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker</span>
<span class="line"></span>
<span class="line">metadata <span class="token operator">=</span> MetaData<span class="token punctuation">(</span></span>
<span class="line">    schema<span class="token operator">=</span><span class="token string">&#39;root.factory&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span>metadata<span class="token operator">=</span>metadata<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Device</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;room2.device1&quot;</span></span>
<span class="line">    Time <span class="token operator">=</span> Column<span class="token punctuation">(</span>BigInteger<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">    temperature <span class="token operator">=</span> Column<span class="token punctuation">(</span>Float<span class="token punctuation">)</span></span>
<span class="line">    status <span class="token operator">=</span> Column<span class="token punctuation">(</span>Float<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&quot;iotdb://root:root@127.0.0.1:6667&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">DbSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span></span>
<span class="line">session <span class="token operator">=</span> DbSession<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">res <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Device<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Device<span class="token punctuation">.</span>temperature <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> row <span class="token keyword">in</span> res<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="developers" tabindex="-1"><a class="header-anchor" href="#developers"><span>Developers</span></a></h2><h3 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h3><p>This is an example of how to connect to IoTDB with python, using the thrift rpc interfaces. Things are almost the same on Windows or Linux, but pay attention to the difference like path separator.</p><h3 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h3><p>Python3.7 or later is preferred.</p><p>You have to install Thrift (0.11.0 or later) to compile our thrift file into python code. Below is the official tutorial of installation, eventually, you should have a thrift executable.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">http://thrift.apache.org/docs/install/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Before starting you need to install <code>requirements_dev.txt</code> in your python environment, e.g. by calling</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements_dev.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="compile-the-thrift-library-and-debug" tabindex="-1"><a class="header-anchor" href="#compile-the-thrift-library-and-debug"><span>Compile the thrift library and Debug</span></a></h3><p>In the root of IoTDB&#39;s source code folder, run <code>mvn clean generate-sources -pl iotdb-client/client-py -am</code>.</p><p>This will automatically delete and repopulate the folder <code>iotdb/thrift</code> with the generated thrift files.<br> This folder is ignored from git and should <strong>never be pushed to git!</strong></p><p><strong>Notice</strong> Do not upload <code>iotdb/thrift</code> to the git repo.</p><h3 id="session-client-example" tabindex="-1"><a class="header-anchor" href="#session-client-example"><span>Session Client &amp; Example</span></a></h3><p>We packed up the Thrift interface in <code>client-py/src/iotdb/Session.py</code> (similar with its Java counterpart), also provided an example file <code>client-py/src/SessionExample.py</code> of how to use the session module. please read it carefully.</p><p>Or, another simple example:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> iotdb<span class="token punctuation">.</span>Session <span class="token keyword">import</span> Session</span>
<span class="line"></span>
<span class="line">ip <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="line">port_ <span class="token operator">=</span> <span class="token string">&quot;6667&quot;</span></span>
<span class="line">username_ <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span></span>
<span class="line">password_ <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span></span>
<span class="line">session <span class="token operator">=</span> Session<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port_<span class="token punctuation">,</span> username_<span class="token punctuation">,</span> password_<span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">zone <span class="token operator">=</span> session<span class="token punctuation">.</span>get_time_zone<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tests" tabindex="-1"><a class="header-anchor" href="#tests"><span>Tests</span></a></h3><p>Please add your custom tests in <code>tests</code> folder.</p><p>To run all defined tests just type <code>pytest .</code> in the root folder.</p><p><strong>Notice</strong> Some tests need docker to be started on your system as a test instance is started in a docker container using <a href="https://testcontainers-python.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener noreferrer">testcontainers</a>.</p><h3 id="futher-tools" tabindex="-1"><a class="header-anchor" href="#futher-tools"><span>Futher Tools</span></a></h3><p><a href="https://pypi.org/project/black/" target="_blank" rel="noopener noreferrer">black</a> and <a href="https://pypi.org/project/flake8/" target="_blank" rel="noopener noreferrer">flake8</a> are installed for autoformatting and linting.<br> Both can be run by <code>black .</code> or <code>flake8 .</code> respectively.</p><h2 id="releasing" tabindex="-1"><a class="header-anchor" href="#releasing"><span>Releasing</span></a></h2><p>To do a release just ensure that you have the right set of generated thrift files.<br> Then run linting and auto-formatting.<br> Then, ensure that all tests work (via <code>pytest .</code>).<br> Then you are good to go to do a release!</p><h3 id="preparing-your-environment" tabindex="-1"><a class="header-anchor" href="#preparing-your-environment"><span>Preparing your environment</span></a></h3><p>First, install all necessary dev dependencies via <code>pip install -r requirements_dev.txt</code>.</p><h3 id="doing-the-release" tabindex="-1"><a class="header-anchor" href="#doing-the-release"><span>Doing the Release</span></a></h3><p>There is a convenient script <code>release.sh</code> to do all steps for a release.<br> Namely, these are</p><ul><li>Remove all transient directories from last release (if exists)</li><li>(Re-)generate all generated sources via mvn</li><li>Run Linting (flake8)</li><li>Run Tests via pytest</li><li>Build</li><li>Release to pypi</li></ul>`,184)]))}const c=s(p,[["render",i],["__file","Programming-Python-Native-API.html.vue"]]),u=JSON.parse('{"path":"/UserGuide/V1.3.0-2/API/Programming-Python-Native-API.html","title":"Python Native API","lang":"en-US","frontmatter":{"description":"Python Native API Requirements You have to install thrift (>=0.13) before using the package. How to use (Example) First, download the package: pip3 install apache-iotdb You can ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://iotdb.apache.org/zh/UserGuide/V1.3.0-2/API/Programming-Python-Native-API.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/UserGuide/V1.3.0-2/API/Programming-Python-Native-API.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"Python Native API"}],["meta",{"property":"og:description","content":"Python Native API Requirements You have to install thrift (>=0.13) before using the package. How to use (Example) First, download the package: pip3 install apache-iotdb You can ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://alioss.timecho.com/docs/img/UserGuide/API/IoTDB-SQLAlchemy/sqlalchemy-to-iotdb.png?raw=true"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-11T11:01:16.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-11T11:01:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python Native API\\",\\"image\\":[\\"https://alioss.timecho.com/docs/img/UserGuide/API/IoTDB-SQLAlchemy/sqlalchemy-to-iotdb.png?raw=true\\"],\\"dateModified\\":\\"2024-11-11T11:01:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Requirements","slug":"requirements","link":"#requirements","children":[]},{"level":2,"title":"How to use (Example)","slug":"how-to-use-example","link":"#how-to-use-example","children":[]},{"level":2,"title":"Initialization","slug":"initialization","link":"#initialization","children":[]},{"level":2,"title":"Managing Session through SessionPool","slug":"managing-session-through-sessionpool","link":"#managing-session-through-sessionpool","children":[{"level":3,"title":"Create SessionPool","slug":"create-sessionpool","link":"#create-sessionpool","children":[]},{"level":3,"title":"Create a SessionPool using distributed nodes.","slug":"create-a-sessionpool-using-distributed-nodes","link":"#create-a-sessionpool-using-distributed-nodes","children":[]},{"level":3,"title":"Acquiring a session through SessionPool and manually calling PutBack after use","slug":"acquiring-a-session-through-sessionpool-and-manually-calling-putback-after-use","link":"#acquiring-a-session-through-sessionpool-and-manually-calling-putback-after-use","children":[]}]},{"level":2,"title":"Data Definition Interface (DDL Interface)","slug":"data-definition-interface-ddl-interface","link":"#data-definition-interface-ddl-interface","children":[{"level":3,"title":"Database Management","slug":"database-management","link":"#database-management","children":[]},{"level":3,"title":"Timeseries Management","slug":"timeseries-management","link":"#timeseries-management","children":[]}]},{"level":2,"title":"Data Manipulation Interface (DML Interface)","slug":"data-manipulation-interface-dml-interface","link":"#data-manipulation-interface-dml-interface","children":[{"level":3,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":3,"title":"Insert with type inference","slug":"insert-with-type-inference","link":"#insert-with-type-inference","children":[]},{"level":3,"title":"Insert of Aligned Timeseries","slug":"insert-of-aligned-timeseries","link":"#insert-of-aligned-timeseries","children":[]}]},{"level":2,"title":"IoTDB-SQL Interface","slug":"iotdb-sql-interface","link":"#iotdb-sql-interface","children":[]},{"level":2,"title":"Schema Template","slug":"schema-template","link":"#schema-template","children":[{"level":3,"title":"Create Schema Template","slug":"create-schema-template","link":"#create-schema-template","children":[]},{"level":3,"title":"Modify Schema Template measurements","slug":"modify-schema-template-measurements","link":"#modify-schema-template-measurements","children":[]},{"level":3,"title":"Set Schema Template","slug":"set-schema-template","link":"#set-schema-template","children":[]},{"level":3,"title":"Uset Schema Template","slug":"uset-schema-template","link":"#uset-schema-template","children":[]},{"level":3,"title":"Show Schema Template","slug":"show-schema-template","link":"#show-schema-template","children":[]},{"level":3,"title":"Drop Schema Template","slug":"drop-schema-template","link":"#drop-schema-template","children":[]}]},{"level":2,"title":"Pandas Support","slug":"pandas-support","link":"#pandas-support","children":[]},{"level":2,"title":"IoTDB Testcontainer","slug":"iotdb-testcontainer","link":"#iotdb-testcontainer","children":[]},{"level":2,"title":"IoTDB DBAPI","slug":"iotdb-dbapi","link":"#iotdb-dbapi","children":[{"level":3,"title":"Examples","slug":"examples","link":"#examples","children":[]}]},{"level":2,"title":"IoTDB SQLAlchemy Dialect (Experimental)","slug":"iotdb-sqlalchemy-dialect-experimental","link":"#iotdb-sqlalchemy-dialect-experimental","children":[{"level":3,"title":"Mapping of the metadata","slug":"mapping-of-the-metadata","link":"#mapping-of-the-metadata","children":[]},{"level":3,"title":"Data type mapping","slug":"data-type-mapping","link":"#data-type-mapping","children":[]},{"level":3,"title":"Example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"Developers","slug":"developers","link":"#developers","children":[{"level":3,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":3,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":3,"title":"Compile the thrift library and Debug","slug":"compile-the-thrift-library-and-debug","link":"#compile-the-thrift-library-and-debug","children":[]},{"level":3,"title":"Session Client & Example","slug":"session-client-example","link":"#session-client-example","children":[]},{"level":3,"title":"Tests","slug":"tests","link":"#tests","children":[]},{"level":3,"title":"Futher Tools","slug":"futher-tools","link":"#futher-tools","children":[]}]},{"level":2,"title":"Releasing","slug":"releasing","link":"#releasing","children":[{"level":3,"title":"Preparing your environment","slug":"preparing-your-environment","link":"#preparing-your-environment","children":[]},{"level":3,"title":"Doing the Release","slug":"doing-the-release","link":"#doing-the-release","children":[]}]}],"git":{"createdTime":1688958677000,"updatedTime":1731322876000,"contributors":[{"name":"W1y1r","email":"150988475+W1y1r@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.03,"words":2408},"filePathRelative":"UserGuide/V1.3.0-2/API/Programming-Python-Native-API.md","localizedDate":"July 10, 2023","autoDesc":true}');export{c as comp,u as data};
