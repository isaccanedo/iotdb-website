import{_ as n,c as e,b as a,o as t}from"./app-BHE9oQwv.js";const l={};function i(p,s){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="字符串处理" tabindex="-1"><a class="header-anchor" href="#字符串处理"><span>字符串处理</span></a></h1><h2 id="string-contains" tabindex="-1"><a class="header-anchor" href="#string-contains"><span>STRING_CONTAINS</span></a></h2><h3 id="函数简介" tabindex="-1"><a class="header-anchor" href="#函数简介"><span>函数简介</span></a></h3><p>本函数判断字符串中是否存在子串 <code>s</code></p><p><strong>函数名:</strong> STRING_CONTAINS</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>参数:</strong></p><ul><li><code>s</code>: 待搜寻的字符串。</li></ul><p><strong>输出序列:</strong> 输出单个序列，类型为 BOOLEAN。</p><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> string_contains<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&#39;s&#39;</span><span class="token operator">=</span><span class="token string">&#39;warn&#39;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d4<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+-------------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d4.s1|string_contains(root.sg1.d4.s1, &quot;s&quot;=&quot;warn&quot;)|</span>
<span class="line">+-----------------------------+--------------+-------------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|    warn:-8721|                                       true|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|  error:-37229|                                      false|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|     warn:1731|                                       true|</span>
<span class="line">+-----------------------------+--------------+-------------------------------------------+</span>
<span class="line">Total line number = 3</span>
<span class="line">It costs 0.007s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string-matches" tabindex="-1"><a class="header-anchor" href="#string-matches"><span>STRING_MATCHES</span></a></h2><h3 id="函数简介-1" tabindex="-1"><a class="header-anchor" href="#函数简介-1"><span>函数简介</span></a></h3><p>本函数判断字符串是否能够被正则表达式<code>regex</code>匹配。</p><p><strong>函数名:</strong> STRING_MATCHES</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>参数:</strong></p><ul><li><code>regex</code>: Java 标准库风格的正则表达式。</li></ul><p><strong>输出序列:</strong> 输出单个序列，类型为 BOOLEAN。</p><h3 id="使用示例-1" tabindex="-1"><a class="header-anchor" href="#使用示例-1"><span>使用示例</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> string_matches<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&#39;regex&#39;</span><span class="token operator">=</span><span class="token string">&#39;[^\\\\s]+37229&#39;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d4<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+------------------------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d4.s1|string_matches(root.sg1.d4.s1, &quot;regex&quot;=&quot;[^\\\\s]+37229&quot;)|</span>
<span class="line">+-----------------------------+--------------+------------------------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|    warn:-8721|                                                 false|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|  error:-37229|                                                  true|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|     warn:1731|                                                 false|</span>
<span class="line">+-----------------------------+--------------+------------------------------------------------------+</span>
<span class="line">Total line number = 3</span>
<span class="line">It costs 0.007s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="length" tabindex="-1"><a class="header-anchor" href="#length"><span>Length</span></a></h2><h3 id="函数简介-2" tabindex="-1"><a class="header-anchor" href="#函数简介-2"><span>函数简介</span></a></h3><p>本函数用于获取输入序列的长度。</p><p><strong>函数名:</strong> LENGTH</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>输出序列:</strong> 输出单个序列，类型为 INT32。</p><p><strong>提示:</strong> 如果输入是NULL，返回NULL。</p><h3 id="使用示例-2" tabindex="-1"><a class="header-anchor" href="#使用示例-2"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> length<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+----------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|length(root.sg1.d1.s1)|</span>
<span class="line">+-----------------------------+--------------+----------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|                     6|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|                     8|</span>
<span class="line">+-----------------------------+--------------+----------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="locate" tabindex="-1"><a class="header-anchor" href="#locate"><span>Locate</span></a></h2><h3 id="函数简介-3" tabindex="-1"><a class="header-anchor" href="#函数简介-3"><span>函数简介</span></a></h3><p>本函数用于获取<code>target</code>子串第一次出现在输入序列的位置，如果输入序列中不包含<code>target</code>则返回 -1 。</p><p><strong>函数名:</strong> LOCATE</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>参数:</strong></p><ul><li><code>target</code>: 需要被定位的子串。</li><li><code>reverse</code>: 指定是否需要倒序定位，默认值为<code>false</code>, 即从左至右定位。</li></ul><p><strong>输出序列:</strong> 输出单个序列，类型为INT32。</p><p><strong>提示:</strong> 下标从 0 开始。</p><h3 id="使用示例-3" tabindex="-1"><a class="header-anchor" href="#使用示例-3"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> locate<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;target&quot;</span><span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|locate(root.sg1.d1.s1, &quot;target&quot;=&quot;1&quot;)|</span>
<span class="line">+-----------------------------+--------------+------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|                                   0|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|                                  -1|</span>
<span class="line">+-----------------------------+--------------+------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> locate<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;target&quot;</span><span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reverse&quot;</span><span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+------------------------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|locate(root.sg1.d1.s1, &quot;target&quot;=&quot;1&quot;, &quot;reverse&quot;=&quot;true&quot;)|</span>
<span class="line">+-----------------------------+--------------+------------------------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|                                                     5|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|                                                    -1|</span>
<span class="line">+-----------------------------+--------------+------------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="startswith" tabindex="-1"><a class="header-anchor" href="#startswith"><span>StartsWith</span></a></h2><h3 id="函数简介-4" tabindex="-1"><a class="header-anchor" href="#函数简介-4"><span>函数简介</span></a></h3><p>本函数用于判断输入序列是否有指定前缀。</p><p><strong>函数名:</strong> STARTSWITH</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>参数:</strong></p><ul><li><code>target</code>: 需要匹配的前缀。</li></ul><p><strong>输出序列:</strong> 输出单个序列，类型为 BOOLEAN。</p><p><strong>提示:</strong> 如果输入是NULL，返回NULL。</p><h3 id="使用示例-4" tabindex="-1"><a class="header-anchor" href="#使用示例-4"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> startswith<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;target&quot;</span><span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+----------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|startswith(root.sg1.d1.s1, &quot;target&quot;=&quot;1&quot;)|</span>
<span class="line">+-----------------------------+--------------+----------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|                                    true|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|                                   false|</span>
<span class="line">+-----------------------------+--------------+----------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="endswith" tabindex="-1"><a class="header-anchor" href="#endswith"><span>EndsWith</span></a></h2><h3 id="函数简介-5" tabindex="-1"><a class="header-anchor" href="#函数简介-5"><span>函数简介</span></a></h3><p>本函数用于判断输入序列是否有指定后缀。</p><p><strong>函数名:</strong> ENDSWITH</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>参数:</strong></p><ul><li><code>target</code>: 需要匹配的后缀。</li></ul><p><strong>输出序列:</strong> 输出单个序列，类型为 BOOLEAN。</p><p><strong>提示:</strong> 如果输入是NULL，返回NULL。</p><h3 id="使用示例-5" tabindex="-1"><a class="header-anchor" href="#使用示例-5"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> endswith<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;target&quot;</span><span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+--------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|endswith(root.sg1.d1.s1, &quot;target&quot;=&quot;1&quot;)|</span>
<span class="line">+-----------------------------+--------------+--------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|                                  true|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|                                 false|</span>
<span class="line">+-----------------------------+--------------+--------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span>Concat</span></a></h2><h3 id="函数简介-6" tabindex="-1"><a class="header-anchor" href="#函数简介-6"><span>函数简介</span></a></h3><p>本函数用于拼接输入序列和<code>target</code>字串。</p><p><strong>函数名:</strong> CONCAT</p><p><strong>输入序列:</strong> 至少一个输入序列，类型为 TEXT。</p><p><strong>参数:</strong></p><ul><li><code>targets</code>: 一系列 K-V, key需要以<code>target</code>为前缀且不重复, value是待拼接的字符串。</li><li><code>series_behind</code>: 指定拼接时时间序列是否在后面，默认为<code>false</code>。</li></ul><p><strong>输出序列:</strong> 输出单个序列，类型为 TEXT。</p><p><strong>提示:</strong></p><ul><li>如果输入序列是NULL, 跳过该序列的拼接。</li><li>函数只能将输入序列和<code>targets</code>区分开各自拼接。<code>concat(s1, &quot;target1&quot;=&quot;IoT&quot;, s2, &quot;target2&quot;=&quot;DB&quot;)</code>和<br><code>concat(s1, s2, &quot;target1&quot;=&quot;IoT&quot;, &quot;target2&quot;=&quot;DB&quot;)</code>得到的结果是一样的。</li></ul><h3 id="使用示例-6" tabindex="-1"><a class="header-anchor" href="#使用示例-6"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|root.sg1.d1.s2|</span>
<span class="line">+-----------------------------+--------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|          null|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|      2222test|</span>
<span class="line">+-----------------------------+--------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> concat<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token string">&quot;target1&quot;</span><span class="token operator">=</span><span class="token string">&quot;IoT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;target2&quot;</span><span class="token operator">=</span><span class="token string">&quot;DB&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+--------------+-----------------------------------------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|root.sg1.d1.s2|concat(root.sg1.d1.s1, root.sg1.d1.s2, &quot;target1&quot;=&quot;IoT&quot;, &quot;target2&quot;=&quot;DB&quot;)|</span>
<span class="line">+-----------------------------+--------------+--------------+-----------------------------------------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|          null|                                                            1test1IoTDB|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|      2222test|                                                  22test222222testIoTDB|</span>
<span class="line">+-----------------------------+--------------+--------------+-----------------------------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> concat<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token string">&quot;target1&quot;</span><span class="token operator">=</span><span class="token string">&quot;IoT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;target2&quot;</span><span class="token operator">=</span><span class="token string">&quot;DB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;series_behind&quot;</span><span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+--------------+-----------------------------------------------------------------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|root.sg1.d1.s2|concat(root.sg1.d1.s1, root.sg1.d1.s2, &quot;target1&quot;=&quot;IoT&quot;, &quot;target2&quot;=&quot;DB&quot;, &quot;series_behind&quot;=&quot;true&quot;)|</span>
<span class="line">+-----------------------------+--------------+--------------+-----------------------------------------------------------------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|          null|                                                                                    IoTDB1test1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|      2222test|                                                                          IoTDB22test222222test|</span>
<span class="line">+-----------------------------+--------------+--------------+-----------------------------------------------------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="substr" tabindex="-1"><a class="header-anchor" href="#substr"><span>Substr</span></a></h2><h3 id="函数简介-7" tabindex="-1"><a class="header-anchor" href="#函数简介-7"><span>函数简介</span></a></h3><p>本函数用于获取下标从<code>start</code>到<code>end - 1</code>的子串</p><p><strong>函数名:</strong> SUBSTR</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为TEXT。</p><p><strong>参数:</strong></p><ul><li><code>start</code>: 指定子串开始下标。</li><li><code>end</code>: 指定子串结束下标。</li></ul><p><strong>输出序列:</strong> 输出单个序列，类型为 TEXT。</p><p><strong>提示:</strong> 如果输入是NULL，返回NULL。</p><h3 id="使用示例-7" tabindex="-1"><a class="header-anchor" href="#使用示例-7"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> substr<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;start&quot;</span><span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+----------------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|substr(root.sg1.d1.s1, &quot;start&quot;=&quot;0&quot;, &quot;end&quot;=&quot;2&quot;)|</span>
<span class="line">+-----------------------------+--------------+----------------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|                                            1t|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|                                            22|</span>
<span class="line">+-----------------------------+--------------+----------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="upper" tabindex="-1"><a class="header-anchor" href="#upper"><span>Upper</span></a></h2><h3 id="函数简介-8" tabindex="-1"><a class="header-anchor" href="#函数简介-8"><span>函数简介</span></a></h3><p>本函数用于将输入序列转化为大写。</p><p><strong>函数名:</strong> UPPER</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为TEXT。</p><p><strong>输出序列:</strong> 输出单个序列，类型为 TEXT。</p><p><strong>提示:</strong> 如果输入是NULL，返回NULL。</p><h3 id="使用示例-8" tabindex="-1"><a class="header-anchor" href="#使用示例-8"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> upper<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+---------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|upper(root.sg1.d1.s1)|</span>
<span class="line">+-----------------------------+--------------+---------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|               1TEST1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|             22TEST22|</span>
<span class="line">+-----------------------------+--------------+---------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lower" tabindex="-1"><a class="header-anchor" href="#lower"><span>Lower</span></a></h2><h3 id="函数简介-9" tabindex="-1"><a class="header-anchor" href="#函数简介-9"><span>函数简介</span></a></h3><p>本函数用于将输入序列转换为小写。</p><p><strong>函数名:</strong> LOWER</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为TEXT。</p><p><strong>输出序列:</strong> 输出单个序列，类型为 TEXT。</p><p><strong>提示:</strong> 如果输入是NULL，返回NULL。</p><h3 id="使用示例-9" tabindex="-1"><a class="header-anchor" href="#使用示例-9"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1TEST1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22TEST22|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> lower<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+---------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|lower(root.sg1.d1.s1)|</span>
<span class="line">+-----------------------------+--------------+---------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1TEST1|               1test1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22TEST22|             22test22|</span>
<span class="line">+-----------------------------+--------------+---------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="trim" tabindex="-1"><a class="header-anchor" href="#trim"><span>Trim</span></a></h2><h3 id="函数简介-10" tabindex="-1"><a class="header-anchor" href="#函数简介-10"><span>函数简介</span></a></h3><p>本函数用于移除输入序列前后的空格。</p><p><strong>函数名:</strong> TRIM</p><p><strong>输入序列:</strong> 仅支持单个输入序列，类型为TEXT。</p><p><strong>输出序列:</strong> 输出单个序列，类型为 TEXT。</p><p><strong>提示:</strong> 如果输入是NULL，返回NULL。</p><h3 id="使用示例-10" tabindex="-1"><a class="header-anchor" href="#使用示例-10"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s3|</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|   3querytest3|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|  3querytest3 |</span>
<span class="line">+-----------------------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s3<span class="token punctuation">,</span> trim<span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+--------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s3|trim(root.sg1.d1.s3)|</span>
<span class="line">+-----------------------------+--------------+--------------------+</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|   3querytest3|         3querytest3|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|  3querytest3 |         3querytest3|</span>
<span class="line">+-----------------------------+--------------+--------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strcmp" tabindex="-1"><a class="header-anchor" href="#strcmp"><span>StrCmp</span></a></h2><h3 id="函数简介-11" tabindex="-1"><a class="header-anchor" href="#函数简介-11"><span>函数简介</span></a></h3><p>本函数用于比较两个输入序列。 如果值相同返回 <code>0</code> , 序列1的值小于序列2的值返回一个<code>负数</code>，序列1的值大于序列2的值返回一个<code>正数</code>。</p><p><strong>函数名:</strong> StrCmp</p><p><strong>输入序列:</strong> 输入两个序列，类型均为 TEXT。</p><p><strong>输出序列:</strong> 输出单个序列，类型为 TEXT。</p><p><strong>提示:</strong> 如果任何一个输入是NULL，返回NULL。</p><h3 id="使用示例-11" tabindex="-1"><a class="header-anchor" href="#使用示例-11"><span>使用示例</span></a></h3><p>输入序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+--------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|root.sg1.d1.s2|</span>
<span class="line">+-----------------------------+--------------+--------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|          null|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|      2222test|</span>
<span class="line">+-----------------------------+--------------+--------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> strcmp<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg1<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------------+--------------+--------------------------------------+</span>
<span class="line">|                         Time|root.sg1.d1.s1|root.sg1.d1.s2|strcmp(root.sg1.d1.s1, root.sg1.d1.s2)|</span>
<span class="line">+-----------------------------+--------------+--------------+--------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|        1test1|          null|                                  null|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|      22test22|      2222test|                                    66|</span>
<span class="line">+-----------------------------+--------------+--------------+--------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strreplace" tabindex="-1"><a class="header-anchor" href="#strreplace"><span>StrReplace</span></a></h2><h3 id="函数简介-12" tabindex="-1"><a class="header-anchor" href="#函数简介-12"><span>函数简介</span></a></h3><p>**非内置函数，需要注册数据质量函数库后才能使用。**本函数用于将文本中的子串替换为指定的字符串。</p><p><strong>函数名：</strong> STRREPLACE</p><p><strong>输入序列：</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>参数：</strong></p><ul><li><code>target</code>: 需要替换的字符子串</li><li><code>replace</code>: 替换后的字符串。</li><li><code>limit</code>: 替换次数，大于等于 -1 的整数，默认为 -1 表示所有匹配的子串都会被替换。</li><li><code>offset</code>: 需要跳过的匹配次数，即前<code>offset</code>次匹配到的字符子串并不会被替换，默认为 0。</li><li><code>reverse</code>: 是否需要反向计数，默认为 false 即按照从左向右的次序。</li></ul><p><strong>输出序列：</strong> 输出单个序列，类型为 TEXT。</p><h3 id="使用示例-12" tabindex="-1"><a class="header-anchor" href="#使用示例-12"><span>使用示例</span></a></h3><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+---------------+</span>
<span class="line">|                         Time|root.test.d1.s1|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|      A,B,A+,B-|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|      A,A+,A,B+|</span>
<span class="line">|2021-01-01T00:00:03.000+08:00|         B+,B,B|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|      A+,A,A+,A|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|       A,B-,B,B|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> strreplace<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;target&quot;</span><span class="token operator">=</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;replace&quot;</span><span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;limit&quot;</span><span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------------------+</span>
<span class="line">|                         Time|strreplace(root.test.d1.s1, &quot;target&quot;=&quot;,&quot;,|</span>
<span class="line">|                             |              &quot;replace&quot;=&quot;/&quot;, &quot;limit&quot;=&quot;2&quot;)|</span>
<span class="line">+-----------------------------+-----------------------------------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|                                A/B/A+,B-|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|                                A/A+/A,B+|</span>
<span class="line">|2021-01-01T00:00:03.000+08:00|                                   B+/B/B|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|                                A+/A/A+,A|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|                                 A/B-/B,B|</span>
<span class="line">+-----------------------------+-----------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个用于查询的 SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> strreplace<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;target&quot;</span><span class="token operator">=</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;replace&quot;</span><span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;limit&quot;</span><span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;offset&quot;</span><span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reverse&quot;</span><span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------------------------------+</span>
<span class="line">|                         Time|strreplace(root.test.d1.s1, &quot;target&quot;=&quot;,&quot;, &quot;replace&quot;= | </span>
<span class="line">|                             |    &quot;|&quot;, &quot;limit&quot;=&quot;1&quot;, &quot;offset&quot;=&quot;1&quot;, &quot;reverse&quot;=&quot;true&quot;)|</span>
<span class="line">+-----------------------------+-----------------------------------------------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|                                            A,B/A+,B-|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|                                            A,A+/A,B+|</span>
<span class="line">|2021-01-01T00:00:03.000+08:00|                                               B+/B,B|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|                                            A+,A/A+,A|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|                                             A,B-/B,B|</span>
<span class="line">+-----------------------------+-----------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="regexmatch" tabindex="-1"><a class="header-anchor" href="#regexmatch"><span>RegexMatch</span></a></h2><h3 id="函数简介-13" tabindex="-1"><a class="header-anchor" href="#函数简介-13"><span>函数简介</span></a></h3><p>**非内置函数，需要注册数据质量函数库后才能使用。**本函数用于正则表达式匹配文本中的具体内容并返回。</p><p><strong>函数名：</strong> REGEXMATCH</p><p><strong>输入序列：</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>参数：</strong></p><ul><li><code>regex</code>: 匹配的正则表达式，支持所有 Java 正则表达式语法，比如<code>\\d+\\.\\d+\\.\\d+\\.\\d+</code>将会匹配任意 IPv4 地址.</li><li><code>group</code>: 输出的匹配组序号，根据 java.util.regex 规定，第 0 组为整个正则表达式，此后的组按照左括号出现的顺序依次编号。<br> 如<code>A(B(CD))</code>中共有三个组，第 0 组<code>A(B(CD))</code>，第 1 组<code>B(CD)</code>和第 2 组<code>CD</code>。</li></ul><p><strong>输出序列：</strong> 输出单个序列，类型为 TEXT。</p><p><strong>提示：</strong> 空值或无法匹配给定的正则表达式的数据点没有输出结果。</p><h3 id="使用示例-13" tabindex="-1"><a class="header-anchor" href="#使用示例-13"><span>使用示例</span></a></h3><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|                         Time|                root.test.d1.s1|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|        [192.168.0.1] [SUCCESS]|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|       [192.168.0.24] [SUCCESS]|</span>
<span class="line">|2021-01-01T00:00:03.000+08:00|           [192.168.0.2] [FAIL]|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|        [192.168.0.5] [SUCCESS]|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|      [192.168.0.124] [SUCCESS]|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> regexmatch<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;regex&quot;</span><span class="token operator">=</span><span class="token string">&quot;\\d+\\.\\d+\\.\\d+\\.\\d+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group&quot;</span><span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+----------------------------------------------------------------------+</span>
<span class="line">|                         Time|regexmatch(root.test.d1.s1, &quot;regex&quot;=&quot;\\d+\\.\\d+\\.\\d+\\.\\d+&quot;, &quot;group&quot;=&quot;0&quot;)|</span>
<span class="line">+-----------------------------+----------------------------------------------------------------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|                                                           192.168.0.1|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|                                                          192.168.0.24|</span>
<span class="line">|2021-01-01T00:00:03.000+08:00|                                                           192.168.0.2|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|                                                           192.168.0.5|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|                                                         192.168.0.124|</span>
<span class="line">+-----------------------------+----------------------------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="regexreplace" tabindex="-1"><a class="header-anchor" href="#regexreplace"><span>RegexReplace</span></a></h2><h3 id="函数简介-14" tabindex="-1"><a class="header-anchor" href="#函数简介-14"><span>函数简介</span></a></h3><p>**非内置函数，需要注册数据质量函数库后才能使用。**本函数用于将文本中符合正则表达式的匹配结果替换为指定的字符串。</p><p><strong>函数名：</strong> REGEXREPLACE</p><p><strong>输入序列：</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>参数：</strong></p><ul><li><code>regex</code>: 需要替换的正则表达式，支持所有 Java 正则表达式语法。</li><li><code>replace</code>: 替换后的字符串，支持 Java 正则表达式中的后向引用，<br> 形如&#39;$1&#39;指代了正则表达式<code>regex</code>中的第一个分组，并会在替换时自动填充匹配到的子串。</li><li><code>limit</code>: 替换次数，大于等于 -1 的整数，默认为 -1 表示所有匹配的子串都会被替换。</li><li><code>offset</code>: 需要跳过的匹配次数，即前<code>offset</code>次匹配到的字符子串并不会被替换，默认为 0。</li><li><code>reverse</code>: 是否需要反向计数，默认为 false 即按照从左向右的次序。</li></ul><p><strong>输出序列：</strong> 输出单个序列，类型为 TEXT。</p><h3 id="使用示例-14" tabindex="-1"><a class="header-anchor" href="#使用示例-14"><span>使用示例</span></a></h3><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|                         Time|                root.test.d1.s1|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|        [192.168.0.1] [SUCCESS]|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|       [192.168.0.24] [SUCCESS]|</span>
<span class="line">|2021-01-01T00:00:03.000+08:00|           [192.168.0.2] [FAIL]|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|        [192.168.0.5] [SUCCESS]|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|      [192.168.0.124] [SUCCESS]|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> regexreplace<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;regex&quot;</span><span class="token operator">=</span><span class="token string">&quot;192\\.168\\.0\\.(\\d+)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;replace&quot;</span><span class="token operator">=</span><span class="token string">&quot;cluster-$1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;limit&quot;</span><span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------------------------------------+</span>
<span class="line">|                         Time|regexreplace(root.test.d1.s1, &quot;regex&quot;=&quot;192\\.168\\.0\\.(\\d+)&quot;,|</span>
<span class="line">|                             |                       &quot;replace&quot;=&quot;cluster-$1&quot;, &quot;limit&quot;=&quot;1&quot;)|</span>
<span class="line">+-----------------------------+-----------------------------------------------------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|                                      [cluster-1] [SUCCESS]|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|                                     [cluster-24] [SUCCESS]|</span>
<span class="line">|2021-01-01T00:00:03.000+08:00|                                         [cluster-2] [FAIL]|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|                                      [cluster-5] [SUCCESS]|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|                                    [cluster-124] [SUCCESS]|</span>
<span class="line">+-----------------------------+-----------------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="regexsplit" tabindex="-1"><a class="header-anchor" href="#regexsplit"><span>RegexSplit</span></a></h2><h3 id="函数简介-15" tabindex="-1"><a class="header-anchor" href="#函数简介-15"><span>函数简介</span></a></h3><p>**非内置函数，需要注册数据质量函数库后才能使用。**本函数用于使用给定的正则表达式切分文本，并返回指定的项。</p><p><strong>函数名：</strong> REGEXSPLIT</p><p><strong>输入序列：</strong> 仅支持单个输入序列，类型为 TEXT。</p><p><strong>参数：</strong></p><ul><li><code>regex</code>: 用于分割文本的正则表达式，支持所有 Java 正则表达式语法，比如<code>[&#39;&quot;]</code>将会匹配任意的英文引号<code>&#39;</code>和<code>&quot;</code>。</li><li><code>index</code>: 输出结果在切分后数组中的序号，需要是大于等于 -1 的整数，默认值为 -1 表示返回切分后数组的长度，其它非负整数即表示返回数组中对应位置的切分结果（数组的秩从 0 开始计数）。</li></ul><p><strong>输出序列：</strong> 输出单个序列，在<code>index</code>为 -1 时输出数据类型为 INT32，否则为 TEXT。</p><p><strong>提示：</strong> 如果<code>index</code>超出了切分后结果数组的秩范围，例如使用<code>,</code>切分<code>0,1,2</code>时输入<code>index</code>为 3，则该数据点没有输出结果。</p><h3 id="使用示例-15" tabindex="-1"><a class="header-anchor" href="#使用示例-15"><span>使用示例</span></a></h3><p>输入序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+---------------+</span>
<span class="line">|                         Time|root.test.d1.s1|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|      A,B,A+,B-|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|      A,A+,A,B+|</span>
<span class="line">|2021-01-01T00:00:03.000+08:00|         B+,B,B|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|      A+,A,A+,A|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|       A,B-,B,B|</span>
<span class="line">+-----------------------------+---------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于查询的 SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> regexsplit<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;regex&quot;</span><span class="token operator">=</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;index&quot;</span><span class="token operator">=</span><span class="token string">&quot;-1&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+------------------------------------------------------+</span>
<span class="line">|                         Time|regexsplit(root.test.d1.s1, &quot;regex&quot;=&quot;,&quot;, &quot;index&quot;=&quot;-1&quot;)|</span>
<span class="line">+-----------------------------+------------------------------------------------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|                                                     4|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|                                                     4|</span>
<span class="line">|2021-01-01T00:00:03.000+08:00|                                                     3|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|                                                     4|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|                                                     4|</span>
<span class="line">+-----------------------------+------------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个查询的 SQL 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> regexsplit<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;regex&quot;</span><span class="token operator">=</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;index&quot;</span><span class="token operator">=</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>test<span class="token punctuation">.</span>d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出序列：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------------------------------+</span>
<span class="line">|                         Time|regexsplit(root.test.d1.s1, &quot;regex&quot;=&quot;,&quot;, &quot;index&quot;=&quot;3&quot;)|</span>
<span class="line">+-----------------------------+-----------------------------------------------------+</span>
<span class="line">|2021-01-01T00:00:01.000+08:00|                                                   B-|</span>
<span class="line">|2021-01-01T00:00:02.000+08:00|                                                   B+|</span>
<span class="line">|2021-01-01T00:00:04.000+08:00|                                                    A|</span>
<span class="line">|2021-01-01T00:00:05.000+08:00|                                                    B|</span>
<span class="line">+-----------------------------+-----------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,254)]))}const c=n(l,[["render",i],["__file","String.html.vue"]]),d=JSON.parse('{"path":"/zh/UserGuide/V1.0.x/Operators-Functions/String.html","title":"字符串处理","lang":"zh-CN","frontmatter":{"description":"字符串处理 STRING_CONTAINS 函数简介 本函数判断字符串中是否存在子串 s 函数名: STRING_CONTAINS 输入序列: 仅支持单个输入序列，类型为 TEXT。 参数: s: 待搜寻的字符串。 输出序列: 输出单个序列，类型为 BOOLEAN。 使用示例 结果： STRING_MATCHES 函数简介 本函数判断字符串是否能够被正...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://iotdb.apache.org/UserGuide/V1.0.x/Operators-Functions/String.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/zh/UserGuide/V1.0.x/Operators-Functions/String.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"字符串处理"}],["meta",{"property":"og:description","content":"字符串处理 STRING_CONTAINS 函数简介 本函数判断字符串中是否存在子串 s 函数名: STRING_CONTAINS 输入序列: 仅支持单个输入序列，类型为 TEXT。 参数: s: 待搜寻的字符串。 输出序列: 输出单个序列，类型为 BOOLEAN。 使用示例 结果： STRING_MATCHES 函数简介 本函数判断字符串是否能够被正..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-07-10T03:11:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-10T03:11:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-10T03:11:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"STRING_CONTAINS","slug":"string-contains","link":"#string-contains","children":[{"level":3,"title":"函数简介","slug":"函数简介","link":"#函数简介","children":[]},{"level":3,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]}]},{"level":2,"title":"STRING_MATCHES","slug":"string-matches","link":"#string-matches","children":[{"level":3,"title":"函数简介","slug":"函数简介-1","link":"#函数简介-1","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-1","link":"#使用示例-1","children":[]}]},{"level":2,"title":"Length","slug":"length","link":"#length","children":[{"level":3,"title":"函数简介","slug":"函数简介-2","link":"#函数简介-2","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-2","link":"#使用示例-2","children":[]}]},{"level":2,"title":"Locate","slug":"locate","link":"#locate","children":[{"level":3,"title":"函数简介","slug":"函数简介-3","link":"#函数简介-3","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-3","link":"#使用示例-3","children":[]}]},{"level":2,"title":"StartsWith","slug":"startswith","link":"#startswith","children":[{"level":3,"title":"函数简介","slug":"函数简介-4","link":"#函数简介-4","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-4","link":"#使用示例-4","children":[]}]},{"level":2,"title":"EndsWith","slug":"endswith","link":"#endswith","children":[{"level":3,"title":"函数简介","slug":"函数简介-5","link":"#函数简介-5","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-5","link":"#使用示例-5","children":[]}]},{"level":2,"title":"Concat","slug":"concat","link":"#concat","children":[{"level":3,"title":"函数简介","slug":"函数简介-6","link":"#函数简介-6","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-6","link":"#使用示例-6","children":[]}]},{"level":2,"title":"Substr","slug":"substr","link":"#substr","children":[{"level":3,"title":"函数简介","slug":"函数简介-7","link":"#函数简介-7","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-7","link":"#使用示例-7","children":[]}]},{"level":2,"title":"Upper","slug":"upper","link":"#upper","children":[{"level":3,"title":"函数简介","slug":"函数简介-8","link":"#函数简介-8","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-8","link":"#使用示例-8","children":[]}]},{"level":2,"title":"Lower","slug":"lower","link":"#lower","children":[{"level":3,"title":"函数简介","slug":"函数简介-9","link":"#函数简介-9","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-9","link":"#使用示例-9","children":[]}]},{"level":2,"title":"Trim","slug":"trim","link":"#trim","children":[{"level":3,"title":"函数简介","slug":"函数简介-10","link":"#函数简介-10","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-10","link":"#使用示例-10","children":[]}]},{"level":2,"title":"StrCmp","slug":"strcmp","link":"#strcmp","children":[{"level":3,"title":"函数简介","slug":"函数简介-11","link":"#函数简介-11","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-11","link":"#使用示例-11","children":[]}]},{"level":2,"title":"StrReplace","slug":"strreplace","link":"#strreplace","children":[{"level":3,"title":"函数简介","slug":"函数简介-12","link":"#函数简介-12","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-12","link":"#使用示例-12","children":[]}]},{"level":2,"title":"RegexMatch","slug":"regexmatch","link":"#regexmatch","children":[{"level":3,"title":"函数简介","slug":"函数简介-13","link":"#函数简介-13","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-13","link":"#使用示例-13","children":[]}]},{"level":2,"title":"RegexReplace","slug":"regexreplace","link":"#regexreplace","children":[{"level":3,"title":"函数简介","slug":"函数简介-14","link":"#函数简介-14","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-14","link":"#使用示例-14","children":[]}]},{"level":2,"title":"RegexSplit","slug":"regexsplit","link":"#regexsplit","children":[{"level":3,"title":"函数简介","slug":"函数简介-15","link":"#函数简介-15","children":[]},{"level":3,"title":"使用示例","slug":"使用示例-15","link":"#使用示例-15","children":[]}]}],"git":{"createdTime":1688958677000,"updatedTime":1688958677000,"contributors":[{"name":"CritasWang","email":"critas@outlook.com","commits":1}]},"readingTime":{"minutes":12.51,"words":3753},"filePathRelative":"zh/UserGuide/V1.0.x/Operators-Functions/String.md","localizedDate":"2023年7月10日","autoDesc":true}');export{c as comp,d as data};
