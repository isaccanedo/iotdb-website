import{_ as n,c as e,b as a,o as t}from"./app-BHE9oQwv.js";const i={};function l(p,s){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="group-by-aggregate" tabindex="-1"><a class="header-anchor" href="#group-by-aggregate"><span>Group By Aggregate</span></a></h1><h2 id="aggregation-by-level" tabindex="-1"><a class="header-anchor" href="#aggregation-by-level"><span>Aggregation By Level</span></a></h2><p>Aggregation by level statement is used to group the query result whose name is the same at the given level.</p><ul><li>Keyword <code>LEVEL</code> is used to specify the level that need to be grouped. By convention, <code>level=0</code> represents <em>root</em> level.</li><li>All aggregation functions are supported. When using five aggregations: sum, avg, min_value, max_value and extreme, please make sure all the aggregated series have exactly the same data type. Otherwise, it will generate a syntax error.</li></ul><p><strong>Example 1:</strong> there are multiple series named <code>status</code> under different databases， like &quot;root.ln.wf01.wt01.status&quot;, &quot;root.ln.wf02.wt02.status&quot;, and &quot;root.sgcc.wf03.wt01.status&quot;. If you need to count the number of data points of the <code>status</code> sequence under different databases, use the following query:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-------------------------+---------------------------+</span>
<span class="line">|count(root.ln.*.*.status)|count(root.sgcc.*.*.status)|</span>
<span class="line">+-------------------------+---------------------------+</span>
<span class="line">|                    20160|                      10080|</span>
<span class="line">+-------------------------+---------------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.003s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 2:</strong> If you need to count the number of data points under different devices, you can specify level = 3,</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+---------------------------+---------------------------+</span>
<span class="line">|count(root.*.*.wt01.status)|count(root.*.*.wt02.status)|</span>
<span class="line">+---------------------------+---------------------------+</span>
<span class="line">|                      20160|                      10080|</span>
<span class="line">+---------------------------+---------------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.003s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 3:</strong> Attention，the devices named <code>wt01</code> under databases <code>ln</code> and <code>sgcc</code> are grouped together, since they are regarded as devices with the same name. If you need to further count the number of data points in different devices under different databases, you can use the following query:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+----------------------------+----------------------------+------------------------------+</span>
<span class="line">|count(root.ln.*.wt01.status)|count(root.ln.*.wt02.status)|count(root.sgcc.*.wt01.status)|</span>
<span class="line">+----------------------------+----------------------------+------------------------------+</span>
<span class="line">|                       10080|                       10080|                         10080|</span>
<span class="line">+----------------------------+----------------------------+------------------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.003s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 4:</strong> Assuming that you want to query the maximum value of temperature sensor under all time series, you can use the following query statement:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> max_value<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+---------------------------------+</span>
<span class="line">|max_value(root.*.*.*.temperature)|</span>
<span class="line">+---------------------------------+</span>
<span class="line">|                             26.0|</span>
<span class="line">+---------------------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.013s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 5:</strong> The above queries are for a certain sensor. In particular, <strong>if you want to query the total data points owned by all sensors at a certain level</strong>, you need to explicitly specify <code>*</code> is selected.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+----------------------+----------------------+</span>
<span class="line">|count(root.*.wf01.*.*)|count(root.*.wf02.*.*)|</span>
<span class="line">+----------------------+----------------------+</span>
<span class="line">|                 20160|                 20160|</span>
<span class="line">+----------------------+----------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.013s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="downsampling-aggregate-query" tabindex="-1"><a class="header-anchor" href="#downsampling-aggregate-query"><span>Downsampling Aggregate Query</span></a></h2><p>Segmentation aggregation is a typical query method for time series data. Data is collected at high frequency and needs to be aggregated and calculated at certain time intervals. For example, to calculate the daily average temperature, the sequence of temperature needs to be segmented by day, and then calculated. average value.</p><p>Downsampling query refers to a query method that uses a lower frequency than the time frequency of data collection, and is a special case of segmented aggregation. For example, the frequency of data collection is one second. If you want to display the data in one minute, you need to use downsampling query.</p><p>This section mainly introduces the related examples of downsampling aggregation query, using the <code>GROUP BY</code> clause. IoTDB supports partitioning result sets according to time interval and customized sliding step. And by default results are sorted by time in ascending order.</p><p>The GROUP BY statement provides users with three types of specified parameters:</p><ul><li>Parameter 1: The display window on the time axis</li><li>Parameter 2: Time interval for dividing the time axis(should be positive)</li><li>Parameter 3: Time sliding step (optional and defaults to equal the time interval if not set)</li></ul><p>The actual meanings of the three types of parameters are shown in Figure below.<br> Among them, the parameter 3 is optional.</p><center><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/github/69109512-f808bc80-0ab2-11ea-9e4d-b2b2f58fb474.png"></center><p>There are three typical examples of frequency reduction aggregation:</p><h3 id="downsampling-aggregate-query-without-specifying-the-sliding-step-length" tabindex="-1"><a class="header-anchor" href="#downsampling-aggregate-query-without-specifying-the-sliding-step-length"><span>Downsampling Aggregate Query without Specifying the Sliding Step Length</span></a></h3><p>The SQL statement is:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_value<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>which means:</p><p>Since the sliding step length is not specified, the GROUP BY statement by default set the sliding step the same as the time interval which is <code>1d</code>.</p><p>The fist parameter of the GROUP BY statement above is the display window parameter, which determines the final display range is [2017-11-01T00:00:00, 2017-11-07T23:00:00).</p><p>The second parameter of the GROUP BY statement above is the time interval for dividing the time axis. Taking this parameter (1d) as time interval and startTime of the display window as the dividing origin, the time axis is divided into several continuous intervals, which are [0,1d), [1d, 2d), [2d, 3d), etc.</p><p>Then the system will use the time and value filtering condition in the WHERE clause and the first parameter of the GROUP BY statement as the data filtering condition to obtain the data satisfying the filtering condition (which in this case is the data in the range of [2017-11-01T00:00:00, 2017-11-07 T23:00:00]), and map these data to the previously segmented time axis (in this case there are mapped data in every 1-day period from 2017-11-01T00:00:00 to 2017-11-07T23:00:00:00).</p><p>Since there is data for each time period in the result range to be displayed, the execution result of the SQL statement is shown below:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                           1440|                                    26.0|</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                           1440|                                    26.0|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                           1440|                                   25.99|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                           1440|                                    26.0|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                           1440|                                    26.0|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                           1440|                                   25.99|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                           1380|                                    26.0|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.024s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="downsampling-aggregate-query-specifying-the-sliding-step-length" tabindex="-1"><a class="header-anchor" href="#downsampling-aggregate-query-specifying-the-sliding-step-length"><span>Downsampling Aggregate Query Specifying the Sliding Step Length</span></a></h3><p>The SQL statement is:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_value<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">23</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span>h<span class="token punctuation">,</span> <span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>which means:</p><p>Since the user specifies the sliding step parameter as 1d, the GROUP BY statement will move the time interval <code>1 day</code> long instead of <code>3 hours</code> as default.</p><p>That means we want to fetch all the data of 00:00:00 to 02:59:59 every day from 2017-11-01 to 2017-11-07.</p><p>The first parameter of the GROUP BY statement above is the display window parameter, which determines the final display range is [2017-11-01T00:00:00, 2017-11-07T23:00:00).</p><p>The second parameter of the GROUP BY statement above is the time interval for dividing the time axis. Taking this parameter (3h) as time interval and the startTime of the display window as the dividing origin, the time axis is divided into several continuous intervals, which are [2017-11-01T00:00:00, 2017-11-01T03:00:00), [2017-11-02T00:00:00, 2017-11-02T03:00:00), [2017-11-03T00:00:00, 2017-11-03T03:00:00), etc.</p><p>The third parameter of the GROUP BY statement above is the sliding step for each time interval moving.</p><p>Then the system will use the time and value filtering condition in the WHERE clause and the first parameter of the GROUP BY statement as the data filtering condition to obtain the data satisfying the filtering condition (which in this case is the data in the range of [2017-11-01T00:00:00, 2017-11-07T23:00:00]), and map these data to the previously segmented time axis (in this case there are mapped data in every 3-hour period for each day from 2017-11-01T00:00:00 to 2017-11-07T23:00:00:00).</p><p>Since there is data for each time period in the result range to be displayed, the execution result of the SQL statement is shown below:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                            180|                                   25.98|</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                            180|                                   25.98|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                            180|                                   25.96|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                            180|                                   25.96|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                            180|                                    26.0|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                            180|                                   25.85|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                            180|                                   25.99|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.006s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The sliding step can be smaller than the interval, in which case there is overlapping time between the aggregation windows (similar to a sliding window).</p><p>The SQL statement is:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_value<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span>h<span class="token punctuation">,</span> <span class="token number">2</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The execution result of the SQL statement is shown below:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                            180|                                   25.98|</span>
<span class="line">|2017-11-01T02:00:00.000+08:00|                            180|                                   25.98|</span>
<span class="line">|2017-11-01T04:00:00.000+08:00|                            180|                                   25.96|</span>
<span class="line">|2017-11-01T06:00:00.000+08:00|                            180|                                   25.96|</span>
<span class="line">|2017-11-01T08:00:00.000+08:00|                            180|                                    26.0|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">Total line number = 5</span>
<span class="line">It costs 0.006s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="downsampling-aggregate-query-by-natural-month" tabindex="-1"><a class="header-anchor" href="#downsampling-aggregate-query-by-natural-month"><span>Downsampling Aggregate Query by Natural Month</span></a></h3><p>The SQL statement is:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span>mo<span class="token punctuation">,</span> <span class="token number">2</span>mo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>which means:</p><p>Since the user specifies the sliding step parameter as <code>2mo</code>, the GROUP BY statement will move the time interval <code>2 months</code> long instead of <code>1 month</code> as default.</p><p>The first parameter of the GROUP BY statement above is the display window parameter, which determines the final display range is [2017-11-01T00:00:00, 2019-11-07T23:00:00).</p><p>The start time is 2017-11-01T00:00:00. The sliding step will increment monthly based on the start date, and the 1st day of the month will be used as the time interval&#39;s start time.</p><p>The second parameter of the GROUP BY statement above is the time interval for dividing the time axis. Taking this parameter (1mo) as time interval and the startTime of the display window as the dividing origin, the time axis is divided into several continuous intervals, which are [2017-11-01T00:00:00, 2017-12-01T00:00:00), [2018-02-01T00:00:00, 2018-03-01T00:00:00), [2018-05-03T00:00:00, 2018-06-01T00:00:00)), etc.</p><p>The third parameter of the GROUP BY statement above is the sliding step for each time interval moving.</p><p>Then the system will use the time and value filtering condition in the WHERE clause and the first parameter of the GROUP BY statement as the data filtering condition to obtain the data satisfying the filtering condition (which in this case is the data in the range of (2017-11-01T00:00:00, 2019-11-07T23:00:00], and map these data to the previously segmented time axis (in this case there are mapped data of the first month in every two month period from 2017-11-01T00:00:00 to 2019-11-07T23:00:00).</p><p>The SQL execution result is:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                            259|</span>
<span class="line">|2018-01-01T00:00:00.000+08:00|                            250|</span>
<span class="line">|2018-03-01T00:00:00.000+08:00|                            259|</span>
<span class="line">|2018-05-01T00:00:00.000+08:00|                            251|</span>
<span class="line">|2018-07-01T00:00:00.000+08:00|                            242|</span>
<span class="line">|2018-09-01T00:00:00.000+08:00|                            225|</span>
<span class="line">|2018-11-01T00:00:00.000+08:00|                            216|</span>
<span class="line">|2019-01-01T00:00:00.000+08:00|                            207|</span>
<span class="line">|2019-03-01T00:00:00.000+08:00|                            216|</span>
<span class="line">|2019-05-01T00:00:00.000+08:00|                            207|</span>
<span class="line">|2019-07-01T00:00:00.000+08:00|                            199|</span>
<span class="line">|2019-09-01T00:00:00.000+08:00|                            181|</span>
<span class="line">|2019-11-01T00:00:00.000+08:00|                             60|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The SQL statement is:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">31</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span>mo<span class="token punctuation">,</span> <span class="token number">2</span>mo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>which means:</p><p>Since the user specifies the sliding step parameter as <code>2mo</code>, the GROUP BY statement will move the time interval <code>2 months</code> long instead of <code>1 month</code> as default.</p><p>The first parameter of the GROUP BY statement above is the display window parameter, which determines the final display range is [2017-10-31T00:00:00, 2019-11-07T23:00:00).</p><p>Different from the previous example, the start time is set to 2017-10-31T00:00:00. The sliding step will increment monthly based on the start date, and the 31st day of the month meaning the last day of the month will be used as the time interval&#39;s start time. If the start time is set to the 30th date, the sliding step will use the 30th or the last day of the month.</p><p>The start time is 2017-10-31T00:00:00. The sliding step will increment monthly based on the start time, and the 1st day of the month will be used as the time interval&#39;s start time.</p><p>The second parameter of the GROUP BY statement above is the time interval for dividing the time axis. Taking this parameter (1mo) as time interval and the startTime of the display window as the dividing origin, the time axis is divided into several continuous intervals, which are [2017-10-31T00:00:00, 2017-11-31T00:00:00), [2018-02-31T00:00:00, 2018-03-31T00:00:00), [2018-05-31T00:00:00, 2018-06-31T00:00:00), etc.</p><p>The third parameter of the GROUP BY statement above is the sliding step for each time interval moving.</p><p>Then the system will use the time and value filtering condition in the WHERE clause and the first parameter of the GROUP BY statement as the data filtering condition to obtain the data satisfying the filtering condition (which in this case is the data in the range of [2017-10-31T00:00:00, 2019-11-07T23:00:00) and map these data to the previously segmented time axis (in this case there are mapped data of the first month in every two month period from 2017-10-31T00:00:00 to 2019-11-07T23:00:00).</p><p>The SQL execution result is:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|2017-10-31T00:00:00.000+08:00|                            251|</span>
<span class="line">|2017-12-31T00:00:00.000+08:00|                            250|</span>
<span class="line">|2018-02-28T00:00:00.000+08:00|                            259|</span>
<span class="line">|2018-04-30T00:00:00.000+08:00|                            250|</span>
<span class="line">|2018-06-30T00:00:00.000+08:00|                            242|</span>
<span class="line">|2018-08-31T00:00:00.000+08:00|                            225|</span>
<span class="line">|2018-10-31T00:00:00.000+08:00|                            216|</span>
<span class="line">|2018-12-31T00:00:00.000+08:00|                            208|</span>
<span class="line">|2019-02-28T00:00:00.000+08:00|                            216|</span>
<span class="line">|2019-04-30T00:00:00.000+08:00|                            208|</span>
<span class="line">|2019-06-30T00:00:00.000+08:00|                            199|</span>
<span class="line">|2019-08-31T00:00:00.000+08:00|                            181|</span>
<span class="line">|2019-10-31T00:00:00.000+08:00|                             69|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="left-open-and-right-close-range" tabindex="-1"><a class="header-anchor" href="#left-open-and-right-close-range"><span>Left Open And Right Close Range</span></a></h3><p>The SQL statement is:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In this sql, the time interval is left open and right close, so we won&#39;t include the value of timestamp 2017-11-01T00:00:00 and instead we will include the value of timestamp 2017-11-07T23:00:00.</p><p>We will get the result like following:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-07T23:00:00.000+08:00|                           1380|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.004s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="downsampling-aggregate-query-with-level-clause" tabindex="-1"><a class="header-anchor" href="#downsampling-aggregate-query-with-level-clause"><span>Downsampling Aggregate Query with Level Clause</span></a></h2><p>Level could be defined to show count the number of points of each node at the given level in current Metadata Tree.</p><p>This could be used to query the number of points under each device.</p><p>The SQL statement is:</p><p>Get downsampling aggregate query by level.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">level</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------+</span>
<span class="line">|                         Time|COUNT(root.ln.*.*.status)|</span>
<span class="line">+-----------------------------+-------------------------+</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-07T23:00:00.000+08:00|                     1380|</span>
<span class="line">+-----------------------------+-------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.006s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Downsampling aggregate query with sliding step and by level.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">23</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span>h<span class="token punctuation">,</span> <span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">level</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------+</span>
<span class="line">|                         Time|COUNT(root.ln.*.*.status)|</span>
<span class="line">+-----------------------------+-------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                      180|</span>
<span class="line">+-----------------------------+-------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.004s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aggregation-by-tags" tabindex="-1"><a class="header-anchor" href="#aggregation-by-tags"><span>Aggregation By Tags</span></a></h2><p>IotDB allows you to do aggregation query with the tags defined in timeseries through <code>GROUP BY TAGS</code> clause as well.</p><p>Firstly, we can put these example data into IoTDB, which will be used in the following feature introduction.</p><p>These are the temperature data of the workshops, which belongs to the factory <code>factory1</code> and locates in different cities. The time range is <code>[1000, 10000)</code>.</p><p>The device node of the timeseries path is the ID of the device. The information of city and workshop are modelled in the tags <code>city</code> and <code>workshop</code>.<br> The devices <code>d1</code> and <code>d2</code> belong to the workshop <code>d1</code> in <code>Beijing</code>.<br><code>d3</code> and <code>d4</code> belong to the workshop <code>w2</code> in <code>Beijing</code>.<br><code>d5</code> and <code>d6</code> belong to the workshop <code>w1</code> in <code>Shanghai</code>.<br><code>d7</code> belongs to the workshop <code>w2</code> in <code>Shanghai</code>.<br><code>d8</code> and <code>d9</code> are under maintenance, and don&#39;t belong to any workshops, so they have no tags.</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">CREATE DATABASE root.factory1;</span>
<span class="line">create timeseries root.factory1.d1.temperature with datatype=FLOAT tags(city=Beijing, workshop=w1);</span>
<span class="line">create timeseries root.factory1.d2.temperature with datatype=FLOAT tags(city=Beijing, workshop=w1);</span>
<span class="line">create timeseries root.factory1.d3.temperature with datatype=FLOAT tags(city=Beijing, workshop=w2);</span>
<span class="line">create timeseries root.factory1.d4.temperature with datatype=FLOAT tags(city=Beijing, workshop=w2);</span>
<span class="line">create timeseries root.factory1.d5.temperature with datatype=FLOAT tags(city=Shanghai, workshop=w1);</span>
<span class="line">create timeseries root.factory1.d6.temperature with datatype=FLOAT tags(city=Shanghai, workshop=w1);</span>
<span class="line">create timeseries root.factory1.d7.temperature with datatype=FLOAT tags(city=Shanghai, workshop=w2);</span>
<span class="line">create timeseries root.factory1.d8.temperature with datatype=FLOAT;</span>
<span class="line">create timeseries root.factory1.d9.temperature with datatype=FLOAT;</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d1(time, temperature) values(1000, 104.0);</span>
<span class="line">insert into root.factory1.d1(time, temperature) values(3000, 104.2);</span>
<span class="line">insert into root.factory1.d1(time, temperature) values(5000, 103.3);</span>
<span class="line">insert into root.factory1.d1(time, temperature) values(7000, 104.1);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d2(time, temperature) values(1000, 104.4);</span>
<span class="line">insert into root.factory1.d2(time, temperature) values(3000, 103.7);</span>
<span class="line">insert into root.factory1.d2(time, temperature) values(5000, 103.3);</span>
<span class="line">insert into root.factory1.d2(time, temperature) values(7000, 102.9);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d3(time, temperature) values(1000, 103.9);</span>
<span class="line">insert into root.factory1.d3(time, temperature) values(3000, 103.8);</span>
<span class="line">insert into root.factory1.d3(time, temperature) values(5000, 102.7);</span>
<span class="line">insert into root.factory1.d3(time, temperature) values(7000, 106.9);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d4(time, temperature) values(1000, 103.9);</span>
<span class="line">insert into root.factory1.d4(time, temperature) values(5000, 102.7);</span>
<span class="line">insert into root.factory1.d4(time, temperature) values(7000, 106.9);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d5(time, temperature) values(1000, 112.9);</span>
<span class="line">insert into root.factory1.d5(time, temperature) values(7000, 113.0);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d6(time, temperature) values(1000, 113.9);</span>
<span class="line">insert into root.factory1.d6(time, temperature) values(3000, 113.3);</span>
<span class="line">insert into root.factory1.d6(time, temperature) values(5000, 112.7);</span>
<span class="line">insert into root.factory1.d6(time, temperature) values(7000, 112.3);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d7(time, temperature) values(1000, 101.2);</span>
<span class="line">insert into root.factory1.d7(time, temperature) values(3000, 99.3);</span>
<span class="line">insert into root.factory1.d7(time, temperature) values(5000, 100.1);</span>
<span class="line">insert into root.factory1.d7(time, temperature) values(7000, 99.8);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d8(time, temperature) values(1000, 50.0);</span>
<span class="line">insert into root.factory1.d8(time, temperature) values(3000, 52.1);</span>
<span class="line">insert into root.factory1.d8(time, temperature) values(5000, 50.1);</span>
<span class="line">insert into root.factory1.d8(time, temperature) values(7000, 50.5);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d9(time, temperature) values(1000, 50.3);</span>
<span class="line">insert into root.factory1.d9(time, temperature) values(3000, 52.1);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aggregation-query-by-one-single-tag" tabindex="-1"><a class="header-anchor" href="#aggregation-query-by-one-single-tag"><span>Aggregation query by one single tag</span></a></h3><p>If the user wants to know the average temperature of each workshop, he can query like this</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">SELECT AVG(temperature) FROM root.factory1.** GROUP BY TAGS(city);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The query will calculate the average of the temperatures of those timeseries which have the same tag value of the key <code>city</code>.<br> The results are</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+--------+------------------+</span>
<span class="line">|    city|  avg(temperature)|</span>
<span class="line">+--------+------------------+</span>
<span class="line">| Beijing|104.04666697184244|</span>
<span class="line">|Shanghai|107.85000076293946|</span>
<span class="line">|    NULL| 50.84999910990397|</span>
<span class="line">+--------+------------------+</span>
<span class="line">Total line number = 3</span>
<span class="line">It costs 0.231s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>From the results we can see that the differences between aggregation by tags query and aggregation by time or level query are:</p><ol><li>Aggregation query by tags will no longer remove wildcard to raw timeseries, but do the aggregation through the data of multiple timeseries, which have the same tag value.</li><li>Except for the aggregate result column, the result set contains the key-value column of the grouped tag. The column name is the tag key, and the values in the column are tag values which present in the searched timeseries.<br> If some searched timeseries doesn&#39;t have the grouped tag, a <code>NULL</code> value in the key-value column of the grouped tag will be presented, which means the aggregation of all the timeseries lacking the tagged key.</li></ol><h3 id="aggregation-query-by-multiple-tags" tabindex="-1"><a class="header-anchor" href="#aggregation-query-by-multiple-tags"><span>Aggregation query by multiple tags</span></a></h3><p>Except for the aggregation query by one single tag, aggregation query by multiple tags in a particular order is allowed as well.</p><p>For example, a user wants to know the average temperature of the devices in each workshop.<br> As the workshop names may be same in different city, it&#39;s not correct to aggregated by the tag <code>workshop</code> directly.<br> So the aggregation by the tag <code>city</code> should be done first, and then by the tag <code>workshop</code>.</p><p>SQL</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">SELECT avg(temperature) FROM root.factory1.** GROUP BY TAGS(city, workshop);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The results</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+--------+--------+------------------+</span>
<span class="line">|    city|workshop|  avg(temperature)|</span>
<span class="line">+--------+--------+------------------+</span>
<span class="line">|    NULL|    NULL| 50.84999910990397|</span>
<span class="line">|Shanghai|      w1|113.01666768391927|</span>
<span class="line">| Beijing|      w2| 104.4000004359654|</span>
<span class="line">|Shanghai|      w2|100.10000038146973|</span>
<span class="line">| Beijing|      w1|103.73750019073486|</span>
<span class="line">+--------+--------+------------------+</span>
<span class="line">Total line number = 5</span>
<span class="line">It costs 0.027s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can see that in a multiple tags aggregation query, the result set will output the key-value columns of all the grouped tag keys, which have the same order with the one in <code>GROUP BY TAGS</code>.</p><h3 id="downsampling-aggregation-by-tags-based-on-time-window" tabindex="-1"><a class="header-anchor" href="#downsampling-aggregation-by-tags-based-on-time-window"><span>Downsampling Aggregation by tags based on Time Window</span></a></h3><p>Downsampling aggregation by time window is one of the most popular features in a time series database. IoTDB supports to do aggregation query by tags based on time window.</p><p>For example, a user wants to know the average temperature of the devices in each workshop, in every 5 seconds, in the range of time <code>[1000, 10000)</code>.</p><p>SQL</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">SELECT avg(temperature) FROM root.factory1.** GROUP BY ([1000, 10000), 5s), TAGS(city, workshop);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The results</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------+--------+------------------+</span>
<span class="line">|                         Time|    city|workshop|  avg(temperature)|</span>
<span class="line">+-----------------------------+--------+--------+------------------+</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|    NULL|    NULL| 50.91999893188476|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|Shanghai|      w1|113.20000076293945|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00| Beijing|      w2|             103.4|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|Shanghai|      w2| 100.1999994913737|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00| Beijing|      w1|103.81666692097981|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|    NULL|    NULL|              50.5|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|Shanghai|      w1| 112.6500015258789|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00| Beijing|      w2| 106.9000015258789|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|Shanghai|      w2| 99.80000305175781|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00| Beijing|      w1|             103.5|</span>
<span class="line">+-----------------------------+--------+--------+------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Comparing to the pure tag aggregations, this kind of aggregation will divide the data according to the time window specification firstly, and do the aggregation query by the multiple tags in each time window secondly.<br> The result set will also contain a time column, which have the same meaning with the time column of the result in downsampling aggregation query by time window.</p><h3 id="limitation-of-aggregation-by-tags" tabindex="-1"><a class="header-anchor" href="#limitation-of-aggregation-by-tags"><span>Limitation of Aggregation by Tags</span></a></h3><p>As this feature is still under development, some queries have not been completed yet and will be supported in the future.</p><blockquote><ol><li>Temporarily not support <code>HAVING</code> clause to filter the results.</li><li>Temporarily not support ordering by tag values.</li><li>Temporarily not support <code>LIMIT</code>，<code>OFFSET</code>，<code>SLIMIT</code>，<code>SOFFSET</code>.</li><li>Temporarily not support <code>ALIGN BY DEVICE</code>.</li><li>Temporarily not support expressions as aggregation function parameter，e.g. <code>count(s+1)</code>.</li><li>Not support the value filter, which stands the same with the <code>GROUP BY LEVEL</code> query.</li></ol></blockquote><h2 id="aggregation-by-variation" tabindex="-1"><a class="header-anchor" href="#aggregation-by-variation"><span>Aggregation By Variation</span></a></h2><p>IoTDB supports grouping by continuous stable values through the <code>GROUP BY VARIATION</code> statement.</p><p>Group-By-Variation wil set the first point in group as the base point,<br> then if the difference between the new data and base point is small than or equal to delta,<br> the data point will be grouped together and execute aggregation query (The calculation of difference and the meaning of delte are introduced below). The groups won&#39;t overlap and there is no fixed start time and end time.<br> The syntax of clause is as follows:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>controlExpression<span class="token punctuation">[</span><span class="token punctuation">,</span>delta<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>ignoreNull<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The different parameters mean:</p><ul><li>controlExpression</li></ul><p>The value that is used to calculate difference. It can be any columns or the expression of them.</p><ul><li>delta</li></ul><p>The threshold that is used when grouping. The difference of controlExpression between the first data point and new data point should less than or equal to delta.<br> When delta is zero, all the continuous data with equal expression value will be grouped into the same group.</p><ul><li>ignoreNull</li></ul><p>Used to specify how to deal with the data when the value of controlExpression is null. When ignoreNull is false, null will be treated as a new value and when ignoreNull is true, the data point will be directly skipped.</p><p>The supported return types of controlExpression and how to deal with null value when ignoreNull is false are shown in the following table:</p><table><thead><tr><th>delta</th><th>Return Type Supported By controlExpression</th><th>The Handling of null when ignoreNull is False</th></tr></thead><tbody><tr><td>delta!=0</td><td>INT32、INT64、FLOAT、DOUBLE</td><td>If the processing group doesn&#39;t contains null, null value should be treated as infinity/infinitesimal and will end current group.<br>Continuous null values are treated as stable values and assigned to the same group.</td></tr><tr><td>delta=0</td><td>TEXT、BINARY、INT32、INT64、FLOAT、DOUBLE</td><td>Null is treated as a new value in a new group and continuous nulls belong to the same group.</td></tr></tbody></table><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/GroupBy/groupByVariation.jpeg" alt="groupByVariation"><h3 id="precautions-for-use" tabindex="-1"><a class="header-anchor" href="#precautions-for-use"><span>Precautions for Use</span></a></h3><ol><li>The result of controlExpression should be a unique value. If multiple columns appear after using wildcard stitching, an error will be reported.</li><li>For a group in resultSet, the time column output the start time of the group by default. __endTime can be used in select clause to output the endTime of groups in resultSet.</li><li>Each device is grouped separately when used with <code>ALIGN BY DEVICE</code>.</li><li>Delta is zero and ignoreNull is true by default.</li><li>Currently <code>GROUP BY VARIATION</code> is not supported with <code>GROUP BY LEVEL</code>.</li></ol><p>Using the raw data below, several examples of <code>GROUP BY VARIAITON</code> queries will be given.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------+-------+-------+--------+-------+-------+</span>
<span class="line">|                         Time|     s1|     s2|     s3|      s4|     s5|     s6|</span>
<span class="line">+-----------------------------+-------+-------+-------+--------+-------+-------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|    4.5|    9.0|    0.0|    45.0|    9.0|   8.25|</span>
<span class="line">|1970-01-01T08:00:00.010+08:00|   null|   19.0|   10.0|   145.0|   19.0|   8.25|</span>
<span class="line">|1970-01-01T08:00:00.020+08:00|   24.5|   29.0|   null|   245.0|   29.0|   null|</span>
<span class="line">|1970-01-01T08:00:00.030+08:00|   34.5|   null|   30.0|   345.0|   null|   null|</span>
<span class="line">|1970-01-01T08:00:00.040+08:00|   44.5|   49.0|   40.0|   445.0|   49.0|   8.25|</span>
<span class="line">|1970-01-01T08:00:00.050+08:00|   null|   59.0|   50.0|   545.0|   59.0|   6.25|</span>
<span class="line">|1970-01-01T08:00:00.060+08:00|   64.5|   69.0|   60.0|   645.0|   69.0|   null|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|   74.5|   79.0|   null|    null|   79.0|   3.25|</span>
<span class="line">|1970-01-01T08:00:00.080+08:00|   84.5|   89.0|   80.0|   845.0|   89.0|   3.25|</span>
<span class="line">|1970-01-01T08:00:00.090+08:00|   94.5|   99.0|   90.0|   945.0|   99.0|   3.25|</span>
<span class="line">|1970-01-01T08:00:00.150+08:00|   66.5|   77.0|   90.0|   945.0|   99.0|   9.25|</span>
<span class="line">+-----------------------------+-------+-------+-------+--------+-------+-------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delta-0" tabindex="-1"><a class="header-anchor" href="#delta-0"><span>delta = 0</span></a></h3><p>The sql is shown below:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg<span class="token punctuation">.</span>d <span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>s6<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get the result below which ignores the row with null value in <code>s6</code>.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.040+08:00|             24.5|                  3|             50.0|</span>
<span class="line">|1970-01-01T08:00:00.050+08:00|1970-01-01T08:00:00.050+08:00|             null|                  1|             50.0|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.090+08:00|             84.5|                  3|            170.0|</span>
<span class="line">|1970-01-01T08:00:00.150+08:00|1970-01-01T08:00:00.150+08:00|             66.5|                  1|             90.0|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>when ignoreNull is false, the row with null value in <code>s6</code> will be considered.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg<span class="token punctuation">.</span>d <span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>s6<span class="token punctuation">,</span> ignoreNull<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get the following result.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.010+08:00|              4.5|                  2|             10.0|</span>
<span class="line">|1970-01-01T08:00:00.020+08:00|1970-01-01T08:00:00.030+08:00|             29.5|                  1|             30.0|</span>
<span class="line">|1970-01-01T08:00:00.040+08:00|1970-01-01T08:00:00.040+08:00|             44.5|                  1|             40.0|</span>
<span class="line">|1970-01-01T08:00:00.050+08:00|1970-01-01T08:00:00.050+08:00|             null|                  1|             50.0|</span>
<span class="line">|1970-01-01T08:00:00.060+08:00|1970-01-01T08:00:00.060+08:00|             64.5|                  1|             60.0|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.090+08:00|             84.5|                  3|            170.0|</span>
<span class="line">|1970-01-01T08:00:00.150+08:00|1970-01-01T08:00:00.150+08:00|             66.5|                  1|             90.0|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delta-0-1" tabindex="-1"><a class="header-anchor" href="#delta-0-1"><span>delta !=0</span></a></h3><p>The sql is shown below:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg<span class="token punctuation">.</span>d <span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>s6<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get the result below:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.050+08:00|             24.5|                  4|            100.0|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.090+08:00|             84.5|                  3|            170.0|</span>
<span class="line">|1970-01-01T08:00:00.150+08:00|1970-01-01T08:00:00.150+08:00|             66.5|                  1|             90.0|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The sql is shown below:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg<span class="token punctuation">.</span>d <span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>s6<span class="token operator">+</span>s5<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get the result below:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.010+08:00|              4.5|                  2|             10.0|</span>
<span class="line">|1970-01-01T08:00:00.040+08:00|1970-01-01T08:00:00.050+08:00|             44.5|                  2|             90.0|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.080+08:00|             79.5|                  2|             80.0|</span>
<span class="line">|1970-01-01T08:00:00.090+08:00|1970-01-01T08:00:00.150+08:00|             80.5|                  2|            180.0|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aggregation-by-condition" tabindex="-1"><a class="header-anchor" href="#aggregation-by-condition"><span>Aggregation By Condition</span></a></h2><p>When you need to filter the data according to a specific condition and group the continuous ones for an aggregation query.<br><code>GROUP BY CONDITION</code> is suitable for you.The rows which don&#39;t meet the given condition will be simply ignored because they don&#39;t belong to any group.<br> Its syntax is defined below:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> condition<span class="token punctuation">(</span>predict<span class="token punctuation">,</span><span class="token punctuation">[</span>keep<span class="token operator">&gt;</span><span class="token operator">/</span><span class="token operator">&gt;=</span><span class="token operator">/</span><span class="token operator">=</span><span class="token operator">/</span><span class="token operator">&lt;=</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token punctuation">]</span>threshold<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">,</span>ignoreNull<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>predict</li></ul><p>Any legal expression return the type of boolean for filtering in grouping.</p><ul><li>[keep&gt;/&gt;=/=/&lt;=/&lt;]threshold</li></ul><p>Keep expression is used to specify the number of continuous rows that meet the <code>predict</code> condition to form a group. Only the number of rows in group satisfy the keep condition, the result of group will be output.<br> Keep expression consists of a &#39;keep&#39; string and a threshold of type <code>long</code> or a single &#39;long&#39; type data.</p><ul><li>ignoreNull=true/false</li></ul><p>Used to specify how to handle data rows that encounter null predict, skip the row when it&#39;s true and end current group when it&#39;s false.</p><h3 id="precautions-for-use-1" tabindex="-1"><a class="header-anchor" href="#precautions-for-use-1"><span>Precautions for Use</span></a></h3><ol><li>keep condition is required in the query, but you can omit the &#39;keep&#39; string and given a <code>long</code> number which defaults to &#39;keep=long number&#39; condition.</li><li>IgnoreNull defaults to true.</li><li>For a group in resultSet, the time column output the start time of the group by default. __endTime can be used in select clause to output the endTime of groups in resultSet.</li><li>Each device is grouped separately when used with <code>ALIGN BY DEVICE</code>.</li><li>Currently <code>GROUP BY CONDITION</code> is not supported with <code>GROUP BY LEVEL</code>.</li></ol><p>For the following raw data, several query examples are given below:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------+-------------------------------------+------------------------------------+</span>
<span class="line">|                         Time|root.sg.beijing.car01.soc|root.sg.beijing.car01.charging_status|root.sg.beijing.car01.vehicle_status|</span>
<span class="line">+-----------------------------+-------------------------+-------------------------------------+------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|                     14.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|                     16.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|                     16.0|                                    0|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.004+08:00|                     16.0|                                    0|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.005+08:00|                     18.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.006+08:00|                     24.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.007+08:00|                     36.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.008+08:00|                     36.0|                                 null|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.009+08:00|                     45.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.010+08:00|                     60.0|                                    1|                                   1|</span>
<span class="line">+-----------------------------+-------------------------+-------------------------------------+------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The sql statement to query data with at least two continuous row shown below:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> max_time<span class="token punctuation">(</span>charging_status<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>vehicle_status<span class="token punctuation">)</span><span class="token punctuation">,</span>last_value<span class="token punctuation">(</span>soc<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> condition<span class="token punctuation">(</span>charging_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>KEEP<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">,</span>ignoringNull<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get the result below:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line">|                         Time|max_time(root.sg.beijing.car01.charging_status)|count(root.sg.beijing.car01.vehicle_status)|last_value(root.sg.beijing.car01.soc)|</span>
<span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|                                              2|                                          2|                                 16.0|</span>
<span class="line">|1970-01-01T08:00:00.005+08:00|                                             10|                                          5|                                 60.0|</span>
<span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When ignoreNull is false, the null value will be treated as a row that doesn&#39;t meet the condition.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> max_time<span class="token punctuation">(</span>charging_status<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>vehicle_status<span class="token punctuation">)</span><span class="token punctuation">,</span>last_value<span class="token punctuation">(</span>soc<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> condition<span class="token punctuation">(</span>charging_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>KEEP<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">,</span>ignoringNull<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get the result below, the original group is split.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line">|                         Time|max_time(root.sg.beijing.car01.charging_status)|count(root.sg.beijing.car01.vehicle_status)|last_value(root.sg.beijing.car01.soc)|</span>
<span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|                                              2|                                          2|                                 16.0|</span>
<span class="line">|1970-01-01T08:00:00.005+08:00|                                              7|                                          3|                                 36.0|</span>
<span class="line">|1970-01-01T08:00:00.009+08:00|                                             10|                                          2|                                 60.0|</span>
<span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aggregation-by-session" tabindex="-1"><a class="header-anchor" href="#aggregation-by-session"><span>Aggregation By Session</span></a></h2><p><code>GROUP BY SESSION</code> can be used to group data according to the interval of the time. Data with a time interval less than or equal to the given threshold will be assigned to the same group.<br> For example, in industrial scenarios, devices don&#39;t always run continuously, <code>GROUP BY SESSION</code> will group the data generated by each access session of the device.<br> Its syntax is defined as follows:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">session</span><span class="token punctuation">(</span>timeInterval<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>timeInterval</li></ul><p>A given interval threshold to create a new group of data when the difference between the time of data is greater than the threshold.</p><p>The figure below is a grouping diagram under <code>GROUP BY SESSION</code>.</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/GroupBy/groupBySession.jpeg" alt="groupBySession"><h3 id="precautions-for-use-2" tabindex="-1"><a class="header-anchor" href="#precautions-for-use-2"><span>Precautions for Use</span></a></h3><ol><li>For a group in resultSet, the time column output the start time of the group by default. __endTime can be used in select clause to output the endTime of groups in resultSet.</li><li>Each device is grouped separately when used with <code>ALIGN BY DEVICE</code>.</li><li>Currently <code>GROUP BY SESSION</code> is not supported with <code>GROUP BY LEVEL</code>.</li></ol><p>For the raw data below, a few query examples are given:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------+-----------+--------+------+</span>
<span class="line">|                         Time|           Device|temperature|hardware|status|</span>
<span class="line">+-----------------------------+-----------------+-----------+--------+------+</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|root.ln.wf02.wt01|       35.7|      11| false|</span>
<span class="line">|1970-01-01T08:00:02.000+08:00|root.ln.wf02.wt01|       35.8|      22|  true|</span>
<span class="line">|1970-01-01T08:00:03.000+08:00|root.ln.wf02.wt01|       35.4|      33| false|</span>
<span class="line">|1970-01-01T08:00:04.000+08:00|root.ln.wf02.wt01|       36.4|      44| false|</span>
<span class="line">|1970-01-01T08:00:05.000+08:00|root.ln.wf02.wt01|       36.8|      55| false|</span>
<span class="line">|1970-01-01T08:00:10.000+08:00|root.ln.wf02.wt01|       36.8|     110| false|</span>
<span class="line">|1970-01-01T08:00:20.000+08:00|root.ln.wf02.wt01|       37.8|     220|  true|</span>
<span class="line">|1970-01-01T08:00:30.000+08:00|root.ln.wf02.wt01|       37.5|     330| false|</span>
<span class="line">|1970-01-01T08:00:40.000+08:00|root.ln.wf02.wt01|       37.4|     440| false|</span>
<span class="line">|1970-01-01T08:00:50.000+08:00|root.ln.wf02.wt01|       37.9|     550| false|</span>
<span class="line">|1970-01-01T08:01:40.000+08:00|root.ln.wf02.wt01|       38.0|     110| false|</span>
<span class="line">|1970-01-01T08:02:30.000+08:00|root.ln.wf02.wt01|       38.8|     220|  true|</span>
<span class="line">|1970-01-01T08:03:20.000+08:00|root.ln.wf02.wt01|       38.6|     330| false|</span>
<span class="line">|1970-01-01T08:04:20.000+08:00|root.ln.wf02.wt01|       38.4|     440| false|</span>
<span class="line">|1970-01-01T08:05:20.000+08:00|root.ln.wf02.wt01|       38.3|     550| false|</span>
<span class="line">|1970-01-01T08:06:40.000+08:00|root.ln.wf02.wt01|       null|       0|  null|</span>
<span class="line">|1970-01-01T08:07:50.000+08:00|root.ln.wf02.wt01|       null|       0|  null|</span>
<span class="line">|1970-01-01T08:08:00.000+08:00|root.ln.wf02.wt01|       null|       0|  null|</span>
<span class="line">|1970-01-02T08:08:01.000+08:00|root.ln.wf02.wt01|       38.2|     110| false|</span>
<span class="line">|1970-01-02T08:08:02.000+08:00|root.ln.wf02.wt01|       37.5|     220|  true|</span>
<span class="line">|1970-01-02T08:08:03.000+08:00|root.ln.wf02.wt01|       37.4|     330| false|</span>
<span class="line">|1970-01-02T08:08:04.000+08:00|root.ln.wf02.wt01|       36.8|     440| false|</span>
<span class="line">|1970-01-02T08:08:05.000+08:00|root.ln.wf02.wt01|       37.4|     550| false|</span>
<span class="line">+-----------------------------+-----------------+-----------+--------+------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TimeInterval can be set by different time units, the sql is shown below:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">session</span><span class="token punctuation">(</span><span class="token number">1</span>d<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get the result：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+------------------------------------+---------------------------------+-------------------------------+</span>
<span class="line">|                         Time|                    __endTime|count(root.ln.wf02.wt01.temperature)|count(root.ln.wf02.wt01.hardware)|count(root.ln.wf02.wt01.status)|</span>
<span class="line">+-----------------------------+-----------------------------+------------------------------------+---------------------------------+-------------------------------+</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|1970-01-01T08:08:00.000+08:00|                                  15|                               18|                             15|</span>
<span class="line">|1970-01-02T08:08:01.000+08:00|1970-01-02T08:08:05.000+08:00|                                   5|                                5|                              5|</span>
<span class="line">+-----------------------------+-----------------------------+------------------------------------+---------------------------------+-------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It can be also used with <code>HAVING</code> and <code>ALIGN BY DEVICE</code> clauses.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>hardware<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf02<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">session</span><span class="token punctuation">(</span><span class="token number">50</span>s<span class="token punctuation">)</span> <span class="token keyword">having</span> <span class="token function">sum</span><span class="token punctuation">(</span>hardware<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span> align <span class="token keyword">by</span> device</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get the result below:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------+-----------------------------+-------------+</span>
<span class="line">|                         Time|           Device|                    __endTime|sum(hardware)|</span>
<span class="line">+-----------------------------+-----------------+-----------------------------+-------------+</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|root.ln.wf02.wt01|1970-01-01T08:03:20.000+08:00|       2475.0|</span>
<span class="line">|1970-01-01T08:04:20.000+08:00|root.ln.wf02.wt01|1970-01-01T08:04:20.000+08:00|        440.0|</span>
<span class="line">|1970-01-01T08:05:20.000+08:00|root.ln.wf02.wt01|1970-01-01T08:05:20.000+08:00|        550.0|</span>
<span class="line">|1970-01-02T08:08:01.000+08:00|root.ln.wf02.wt01|1970-01-02T08:08:05.000+08:00|       1650.0|</span>
<span class="line">+-----------------------------+-----------------+-----------------------------+-------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,210)]))}const r=n(i,[["render",l],["__file","Group-By.html.vue"]]),c=JSON.parse('{"path":"/UserGuide/V1.1.x/Query-Data/Group-By.html","title":"Group By Aggregate","lang":"en-US","frontmatter":{"description":"Group By Aggregate Aggregation By Level Aggregation by level statement is used to group the query result whose name is the same at the given level. Keyword LEVEL is used to spec...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://iotdb.apache.org/zh/UserGuide/V1.1.x/Query-Data/Group-By.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/UserGuide/V1.1.x/Query-Data/Group-By.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"Group By Aggregate"}],["meta",{"property":"og:description","content":"Group By Aggregate Aggregation By Level Aggregation by level statement is used to group the query result whose name is the same at the given level. Keyword LEVEL is used to spec..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-10T03:11:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-10T03:11:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Group By Aggregate\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-10T03:11:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Aggregation By Level","slug":"aggregation-by-level","link":"#aggregation-by-level","children":[]},{"level":2,"title":"Downsampling Aggregate Query","slug":"downsampling-aggregate-query","link":"#downsampling-aggregate-query","children":[{"level":3,"title":"Downsampling Aggregate Query without Specifying the Sliding Step Length","slug":"downsampling-aggregate-query-without-specifying-the-sliding-step-length","link":"#downsampling-aggregate-query-without-specifying-the-sliding-step-length","children":[]},{"level":3,"title":"Downsampling Aggregate Query Specifying the Sliding Step Length","slug":"downsampling-aggregate-query-specifying-the-sliding-step-length","link":"#downsampling-aggregate-query-specifying-the-sliding-step-length","children":[]},{"level":3,"title":"Downsampling Aggregate Query by Natural Month","slug":"downsampling-aggregate-query-by-natural-month","link":"#downsampling-aggregate-query-by-natural-month","children":[]},{"level":3,"title":"Left Open And Right Close Range","slug":"left-open-and-right-close-range","link":"#left-open-and-right-close-range","children":[]}]},{"level":2,"title":"Downsampling Aggregate Query with Level Clause","slug":"downsampling-aggregate-query-with-level-clause","link":"#downsampling-aggregate-query-with-level-clause","children":[]},{"level":2,"title":"Aggregation By Tags","slug":"aggregation-by-tags","link":"#aggregation-by-tags","children":[{"level":3,"title":"Aggregation query by one single tag","slug":"aggregation-query-by-one-single-tag","link":"#aggregation-query-by-one-single-tag","children":[]},{"level":3,"title":"Aggregation query by multiple tags","slug":"aggregation-query-by-multiple-tags","link":"#aggregation-query-by-multiple-tags","children":[]},{"level":3,"title":"Downsampling Aggregation by tags based on Time Window","slug":"downsampling-aggregation-by-tags-based-on-time-window","link":"#downsampling-aggregation-by-tags-based-on-time-window","children":[]},{"level":3,"title":"Limitation of Aggregation by Tags","slug":"limitation-of-aggregation-by-tags","link":"#limitation-of-aggregation-by-tags","children":[]}]},{"level":2,"title":"Aggregation By Variation","slug":"aggregation-by-variation","link":"#aggregation-by-variation","children":[{"level":3,"title":"Precautions for Use","slug":"precautions-for-use","link":"#precautions-for-use","children":[]},{"level":3,"title":"delta = 0","slug":"delta-0","link":"#delta-0","children":[]},{"level":3,"title":"delta !=0","slug":"delta-0-1","link":"#delta-0-1","children":[]}]},{"level":2,"title":"Aggregation By Condition","slug":"aggregation-by-condition","link":"#aggregation-by-condition","children":[{"level":3,"title":"Precautions for Use","slug":"precautions-for-use-1","link":"#precautions-for-use-1","children":[]}]},{"level":2,"title":"Aggregation By Session","slug":"aggregation-by-session","link":"#aggregation-by-session","children":[{"level":3,"title":"Precautions for Use","slug":"precautions-for-use-2","link":"#precautions-for-use-2","children":[]}]}],"git":{"createdTime":1688958677000,"updatedTime":1688958677000,"contributors":[{"name":"CritasWang","email":"critas@outlook.com","commits":1}]},"readingTime":{"minutes":21.32,"words":6396},"filePathRelative":"UserGuide/V1.1.x/Query-Data/Group-By.md","localizedDate":"July 10, 2023","autoDesc":true}');export{r as comp,c as data};
