import{_ as n,c as a,b as e,o as l}from"./app-BHE9oQwv.js";const i={};function t(p,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h2 id="分段分组聚合" tabindex="-1"><a class="header-anchor" href="#分段分组聚合"><span>分段分组聚合</span></a></h2><h3 id="时间区间分段聚合" tabindex="-1"><a class="header-anchor" href="#时间区间分段聚合"><span>时间区间分段聚合</span></a></h3><p>分段聚合是一种时序数据典型的查询方式，数据以高频进行采集，需要按照一定的时间间隔进行聚合计算，如计算每天的平均气温，需要将气温的序列按天进行分段，然后计算平均值。</p><p>在 IoTDB 中，聚合查询可以通过 <code>GROUP BY</code> 子句指定按照时间区间分段聚合。用户可以指定聚合的时间间隔和滑动步长，相关参数如下：</p><ul><li>参数 1：时间轴显示时间窗口大小</li><li>参数 2：聚合窗口的大小（必须为正数）</li><li>参数 3：聚合窗口的滑动步长（可选，默认与聚合窗口大小相同）</li></ul><p>下图中指出了这三个参数的含义：</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/github/69109512-f808bc80-0ab2-11ea-9e4d-b2b2f58fb474.png"><p>接下来，我们给出几个典型例子：</p><h4 id="未指定滑动步长的时间区间分组聚合查询" tabindex="-1"><a class="header-anchor" href="#未指定滑动步长的时间区间分组聚合查询"><span>未指定滑动步长的时间区间分组聚合查询</span></a></h4><p>对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_value<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询的含义是：</p><p>由于用户没有指定滑动步长，滑动步长将会被默认设置为跟时间间隔参数相同，也就是<code>1d</code>。</p><p>上面这个例子的第一个参数是显示窗口参数，决定了最终的显示范围是 [2017-11-01T00:00:00, 2017-11-07T23:00:00)。</p><p>上面这个例子的第二个参数是划分时间轴的时间间隔参数，将<code>1d</code>当作划分间隔，显示窗口参数的起始时间当作分割原点，时间轴即被划分为连续的时间间隔：[0,1d), [1d, 2d), [2d, 3d) 等等。</p><p>然后系统将会用 WHERE 子句中的时间和值过滤条件以及 GROUP BY 语句中的第一个参数作为数据的联合过滤条件，获得满足所有过滤条件的数据（在这个例子里是在 [2017-11-01T00:00:00, 2017-11-07 T23:00:00) 这个时间范围的数据），并把这些数据映射到之前分割好的时间轴中（这个例子里是从 2017-11-01T00:00:00 到 2017-11-07T23:00:00:00 的每一天）</p><p>每个时间间隔窗口内都有数据，SQL 执行后的结果集如下所示：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                           1440|                                    26.0|</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                           1440|                                    26.0|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                           1440|                                   25.99|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                           1440|                                    26.0|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                           1440|                                    26.0|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                           1440|                                   25.99|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                           1380|                                    26.0|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.024s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指定滑动步长的时间区间分组聚合查询" tabindex="-1"><a class="header-anchor" href="#指定滑动步长的时间区间分组聚合查询"><span>指定滑动步长的时间区间分组聚合查询</span></a></h4><p>对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_value<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">23</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span>h<span class="token punctuation">,</span> <span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询的含义是：</p><p>由于用户指定了滑动步长为<code>1d</code>，GROUP BY 语句执行时将会每次把时间间隔往后移动一天的步长，而不是默认的 3 小时。</p><p>也就意味着，我们想要取从 2017-11-01 到 2017-11-07 每一天的凌晨 0 点到凌晨 3 点的数据。</p><p>上面这个例子的第一个参数是显示窗口参数，决定了最终的显示范围是 [2017-11-01T00:00:00, 2017-11-07T23:00:00)。</p><p>上面这个例子的第二个参数是划分时间轴的时间间隔参数，将<code>3h</code>当作划分间隔，显示窗口参数的起始时间当作分割原点，时间轴即被划分为连续的时间间隔：[2017-11-01T00:00:00, 2017-11-01T03:00:00), [2017-11-02T00:00:00, 2017-11-02T03:00:00), [2017-11-03T00:00:00, 2017-11-03T03:00:00) 等等。</p><p>上面这个例子的第三个参数是每次时间间隔的滑动步长。</p><p>然后系统将会用 WHERE 子句中的时间和值过滤条件以及 GROUP BY 语句中的第一个参数作为数据的联合过滤条件，获得满足所有过滤条件的数据（在这个例子里是在 [2017-11-01T00:00:00, 2017-11-07 T23:00:00) 这个时间范围的数据），并把这些数据映射到之前分割好的时间轴中（这个例子里是从 2017-11-01T00:00:00 到 2017-11-07T23:00:00:00 的每一天的凌晨 0 点到凌晨 3 点）</p><p>每个时间间隔窗口内都有数据，SQL 执行后的结果集如下所示：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                            180|                                   25.98|</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                            180|                                   25.98|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                            180|                                   25.96|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                            180|                                   25.96|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                            180|                                    26.0|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                            180|                                   25.85|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                            180|                                   25.99|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.006s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>滑动步长可以小于聚合窗口，此时聚合窗口之间有重叠时间（类似于一个滑动窗口）。</p><p>例如 SQL：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_value<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">10</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span>h<span class="token punctuation">,</span> <span class="token number">2</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>SQL 执行后的结果集如下所示：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|max_value(root.ln.wf01.wt01.temperature)|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                            180|                                   25.98|</span>
<span class="line">|2017-11-01T02:00:00.000+08:00|                            180|                                   25.98|</span>
<span class="line">|2017-11-01T04:00:00.000+08:00|                            180|                                   25.96|</span>
<span class="line">|2017-11-01T06:00:00.000+08:00|                            180|                                   25.96|</span>
<span class="line">|2017-11-01T08:00:00.000+08:00|                            180|                                    26.0|</span>
<span class="line">+-----------------------------+-------------------------------+----------------------------------------+</span>
<span class="line">Total line number = 5</span>
<span class="line">It costs 0.006s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按照自然月份的时间区间分组聚合查询" tabindex="-1"><a class="header-anchor" href="#按照自然月份的时间区间分组聚合查询"><span>按照自然月份的时间区间分组聚合查询</span></a></h4><p>对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">where</span> <span class="token keyword">time</span> <span class="token operator">&gt;</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T01:<span class="token number">00</span>:<span class="token number">00</span> <span class="token keyword">group</span> <span class="token keyword">by</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span>mo<span class="token punctuation">,</span> <span class="token number">2</span>mo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询的含义是：</p><p>由于用户指定了滑动步长为<code>2mo</code>，GROUP BY 语句执行时将会每次把时间间隔往后移动 2 个自然月的步长，而不是默认的 1 个自然月。</p><p>也就意味着，我们想要取从 2017-11-01 到 2019-11-07 每 2 个自然月的第一个月的数据。</p><p>上面这个例子的第一个参数是显示窗口参数，决定了最终的显示范围是 [2017-11-01T00:00:00, 2019-11-07T23:00:00)。</p><p>起始时间为 2017-11-01T00:00:00，滑动步长将会以起始时间作为标准按月递增，取当月的 1 号作为时间间隔的起始时间。</p><p>上面这个例子的第二个参数是划分时间轴的时间间隔参数，将<code>1mo</code>当作划分间隔，显示窗口参数的起始时间当作分割原点，时间轴即被划分为连续的时间间隔：[2017-11-01T00:00:00, 2017-12-01T00:00:00), [2018-02-01T00:00:00, 2018-03-01T00:00:00), [2018-05-03T00:00:00, 2018-06-01T00:00:00) 等等。</p><p>上面这个例子的第三个参数是每次时间间隔的滑动步长。</p><p>然后系统将会用 WHERE 子句中的时间和值过滤条件以及 GROUP BY 语句中的第一个参数作为数据的联合过滤条件，获得满足所有过滤条件的数据（在这个例子里是在 [2017-11-01T00:00:00, 2019-11-07T23:00:00) 这个时间范围的数据），并把这些数据映射到之前分割好的时间轴中（这个例子里是从 2017-11-01T00:00:00 到 2019-11-07T23:00:00:00 的每两个自然月的第一个月）</p><p>每个时间间隔窗口内都有数据，SQL 执行后的结果集如下所示：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                            259|</span>
<span class="line">|2018-01-01T00:00:00.000+08:00|                            250|</span>
<span class="line">|2018-03-01T00:00:00.000+08:00|                            259|</span>
<span class="line">|2018-05-01T00:00:00.000+08:00|                            251|</span>
<span class="line">|2018-07-01T00:00:00.000+08:00|                            242|</span>
<span class="line">|2018-09-01T00:00:00.000+08:00|                            225|</span>
<span class="line">|2018-11-01T00:00:00.000+08:00|                            216|</span>
<span class="line">|2019-01-01T00:00:00.000+08:00|                            207|</span>
<span class="line">|2019-03-01T00:00:00.000+08:00|                            216|</span>
<span class="line">|2019-05-01T00:00:00.000+08:00|                            207|</span>
<span class="line">|2019-07-01T00:00:00.000+08:00|                            199|</span>
<span class="line">|2019-09-01T00:00:00.000+08:00|                            181|</span>
<span class="line">|2019-11-01T00:00:00.000+08:00|                             60|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">31</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span>mo<span class="token punctuation">,</span> <span class="token number">2</span>mo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询的含义是：</p><p>由于用户指定了滑动步长为<code>2mo</code>，GROUP BY 语句执行时将会每次把时间间隔往后移动 2 个自然月的步长，而不是默认的 1 个自然月。</p><p>也就意味着，我们想要取从 2017-10-31 到 2019-11-07 每 2 个自然月的第一个月的数据。</p><p>与上述示例不同的是起始时间为 2017-10-31T00:00:00，滑动步长将会以起始时间作为标准按月递增，取当月的 31 号（即最后一天）作为时间间隔的起始时间。若起始时间设置为 30 号，滑动步长会将时间间隔的起始时间设置为当月 30 号，若不存在则为最后一天。</p><p>上面这个例子的第一个参数是显示窗口参数，决定了最终的显示范围是 [2017-10-31T00:00:00, 2019-11-07T23:00:00)。</p><p>上面这个例子的第二个参数是划分时间轴的时间间隔参数，将<code>1mo</code>当作划分间隔，显示窗口参数的起始时间当作分割原点，时间轴即被划分为连续的时间间隔：[2017-10-31T00:00:00, 2017-11-31T00:00:00), [2018-02-31T00:00:00, 2018-03-31T00:00:00), [2018-05-31T00:00:00, 2018-06-31T00:00:00) 等等。</p><p>上面这个例子的第三个参数是每次时间间隔的滑动步长。</p><p>然后系统将会用 WHERE 子句中的时间和值过滤条件以及 GROUP BY 语句中的第一个参数作为数据的联合过滤条件，获得满足所有过滤条件的数据（在这个例子里是在 [2017-10-31T00:00:00, 2019-11-07T23:00:00) 这个时间范围的数据），并把这些数据映射到之前分割好的时间轴中（这个例子里是从 2017-10-31T00:00:00 到 2019-11-07T23:00:00:00 的每两个自然月的第一个月）</p><p>每个时间间隔窗口内都有数据，SQL 执行后的结果集如下所示：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|2017-10-31T00:00:00.000+08:00|                            251|</span>
<span class="line">|2017-12-31T00:00:00.000+08:00|                            250|</span>
<span class="line">|2018-02-28T00:00:00.000+08:00|                            259|</span>
<span class="line">|2018-04-30T00:00:00.000+08:00|                            250|</span>
<span class="line">|2018-06-30T00:00:00.000+08:00|                            242|</span>
<span class="line">|2018-08-31T00:00:00.000+08:00|                            225|</span>
<span class="line">|2018-10-31T00:00:00.000+08:00|                            216|</span>
<span class="line">|2018-12-31T00:00:00.000+08:00|                            208|</span>
<span class="line">|2019-02-28T00:00:00.000+08:00|                            216|</span>
<span class="line">|2019-04-30T00:00:00.000+08:00|                            208|</span>
<span class="line">|2019-06-30T00:00:00.000+08:00|                            199|</span>
<span class="line">|2019-08-31T00:00:00.000+08:00|                            181|</span>
<span class="line">|2019-10-31T00:00:00.000+08:00|                             69|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="左开右闭区间" tabindex="-1"><a class="header-anchor" href="#左开右闭区间"><span>左开右闭区间</span></a></h4><p>每个区间的结果时间戳为区间右端点，对应的 SQL 语句是：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条查询语句的时间区间是左开右闭的，结果中不会包含时间点 2017-11-01 的数据，但是会包含时间点 2017-11-07 的数据。</p><p>SQL 执行后的结果集如下所示：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|                         Time|count(root.ln.wf01.wt01.status)|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                           1440|</span>
<span class="line">|2017-11-07T23:00:00.000+08:00|                           1380|</span>
<span class="line">+-----------------------------+-------------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.004s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="与分组聚合混合使用" tabindex="-1"><a class="header-anchor" href="#与分组聚合混合使用"><span>与分组聚合混合使用</span></a></h4><p>通过定义 LEVEL 来统计指定层级下的数据点个数。</p><p>例如：</p><p>统计降采样后的数据点个数</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span>T00:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span>T23:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">level</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------+</span>
<span class="line">|                         Time|COUNT(root.ln.*.*.status)|</span>
<span class="line">+-----------------------------+-------------------------+</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                     1440|</span>
<span class="line">|2017-11-07T23:00:00.000+08:00|                     1380|</span>
<span class="line">+-----------------------------+-------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.006s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上滑动 Step 的降采样后的结果也可以汇总</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf01<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">23</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span>h<span class="token punctuation">,</span> <span class="token number">1</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">level</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------+</span>
<span class="line">|                         Time|COUNT(root.ln.*.*.status)|</span>
<span class="line">+-----------------------------+-------------------------+</span>
<span class="line">|2017-11-01T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-02T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-03T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-04T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-05T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-06T00:00:00.000+08:00|                      180|</span>
<span class="line">|2017-11-07T00:00:00.000+08:00|                      180|</span>
<span class="line">+-----------------------------+-------------------------+</span>
<span class="line">Total line number = 7</span>
<span class="line">It costs 0.004s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路径层级分组聚合" tabindex="-1"><a class="header-anchor" href="#路径层级分组聚合"><span>路径层级分组聚合</span></a></h3><p>在时间序列层级结构中，分层聚合查询用于<strong>对某一层级下同名的序列进行聚合查询</strong>。</p><ul><li>使用 <code>GROUP BY LEVEL = INT</code> 来指定需要聚合的层级，并约定 <code>ROOT</code> 为第 0 层。若统计 &quot;root.ln&quot; 下所有序列则需指定 level 为 1。</li><li>分层聚合查询支持使用所有内置聚合函数。对于 <code>sum</code>，<code>avg</code>，<code>min_value</code>， <code>max_value</code>， <code>extreme</code> 五种聚合函数，需保证所有聚合的时间序列数据类型相同。其他聚合函数没有此限制。</li></ul><p><strong>示例1：</strong> 不同 database 下均存在名为 status 的序列， 如 &quot;root.ln.wf01.wt01.status&quot;, &quot;root.ln.wf02.wt02.status&quot;, 以及 &quot;root.sgcc.wf03.wt01.status&quot;, 如果需要统计不同 database 下 status 序列的数据点个数，使用以下查询：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-------------------------+---------------------------+</span>
<span class="line">|count(root.ln.*.*.status)|count(root.sgcc.*.*.status)|</span>
<span class="line">+-------------------------+---------------------------+</span>
<span class="line">|                    20160|                      10080|</span>
<span class="line">+-------------------------+---------------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.003s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例2：</strong> 统计不同设备下 status 序列的数据点个数，可以规定 level = 3，</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+---------------------------+---------------------------+</span>
<span class="line">|count(root.*.*.wt01.status)|count(root.*.*.wt02.status)|</span>
<span class="line">+---------------------------+---------------------------+</span>
<span class="line">|                      20160|                      10080|</span>
<span class="line">+---------------------------+---------------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.003s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这时会将 database <code>ln</code> 和 <code>sgcc</code> 下名为 <code>wt01</code> 的设备视为同名设备聚合在一起。</p><p><strong>示例3：</strong> 统计不同 database 下的不同设备中 status 序列的数据点个数，可以使用以下查询：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+----------------------------+----------------------------+------------------------------+</span>
<span class="line">|count(root.ln.*.wt01.status)|count(root.ln.*.wt02.status)|count(root.sgcc.*.wt01.status)|</span>
<span class="line">+----------------------------+----------------------------+------------------------------+</span>
<span class="line">|                       10080|                       10080|                         10080|</span>
<span class="line">+----------------------------+----------------------------+------------------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.003s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例4：</strong> 查询所有序列下温度传感器 temperature 的最大值，可以使用下列查询语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> max_value<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+---------------------------------+</span>
<span class="line">|max_value(root.*.*.*.temperature)|</span>
<span class="line">+---------------------------------+</span>
<span class="line">|                             26.0|</span>
<span class="line">+---------------------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.013s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例5：</strong> 上面的查询都是针对某一个传感器，特别地，<strong>如果想要查询某一层级下所有传感器拥有的总数据点数，则需要显式规定测点为 <code>*</code></strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">level</span> <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+----------------------+----------------------+</span>
<span class="line">|count(root.*.wf01.*.*)|count(root.*.wf02.*.*)|</span>
<span class="line">+----------------------+----------------------+</span>
<span class="line">|                 20160|                 20160|</span>
<span class="line">+----------------------+----------------------+</span>
<span class="line">Total line number = 1</span>
<span class="line">It costs 0.013s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标签分组聚合" tabindex="-1"><a class="header-anchor" href="#标签分组聚合"><span>标签分组聚合</span></a></h3><p>IoTDB 支持通过 <code>GROUP BY TAGS</code> 语句根据时间序列中定义的标签的键值做聚合查询。</p><p>我们先在 IoTDB 中写入如下示例数据，稍后会以这些数据为例介绍标签聚合查询。</p><p>这些是某工厂 <code>factory1</code> 在多个城市的多个车间的设备温度数据， 时间范围为 [1000, 10000)。</p><p>时间序列路径中的设备一级是设备唯一标识。城市信息 <code>city</code> 和车间信息 <code>workshop</code> 则被建模在该设备时间序列的标签中。<br> 其中，设备 <code>d1</code>、<code>d2</code> 在 <code>Beijing</code> 的 <code>w1</code> 车间， <code>d3</code>、<code>d4</code> 在 <code>Beijing</code> 的 <code>w2</code> 车间，<code>d5</code>、<code>d6</code> 在 <code>Shanghai</code> 的 <code>w1</code> 车间，<code>d7</code> 在 <code>Shanghai</code> 的 <code>w2</code> 车间。<br><code>d8</code> 和 <code>d9</code> 设备目前处于调试阶段，还未被分配到具体的城市和车间，所以其相应的标签值为空值。</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">create database root.factory1;</span>
<span class="line">create timeseries root.factory1.d1.temperature with datatype=FLOAT tags(city=Beijing, workshop=w1);</span>
<span class="line">create timeseries root.factory1.d2.temperature with datatype=FLOAT tags(city=Beijing, workshop=w1);</span>
<span class="line">create timeseries root.factory1.d3.temperature with datatype=FLOAT tags(city=Beijing, workshop=w2);</span>
<span class="line">create timeseries root.factory1.d4.temperature with datatype=FLOAT tags(city=Beijing, workshop=w2);</span>
<span class="line">create timeseries root.factory1.d5.temperature with datatype=FLOAT tags(city=Shanghai, workshop=w1);</span>
<span class="line">create timeseries root.factory1.d6.temperature with datatype=FLOAT tags(city=Shanghai, workshop=w1);</span>
<span class="line">create timeseries root.factory1.d7.temperature with datatype=FLOAT tags(city=Shanghai, workshop=w2);</span>
<span class="line">create timeseries root.factory1.d8.temperature with datatype=FLOAT;</span>
<span class="line">create timeseries root.factory1.d9.temperature with datatype=FLOAT;</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d1(time, temperature) values(1000, 104.0);</span>
<span class="line">insert into root.factory1.d1(time, temperature) values(3000, 104.2);</span>
<span class="line">insert into root.factory1.d1(time, temperature) values(5000, 103.3);</span>
<span class="line">insert into root.factory1.d1(time, temperature) values(7000, 104.1);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d2(time, temperature) values(1000, 104.4);</span>
<span class="line">insert into root.factory1.d2(time, temperature) values(3000, 103.7);</span>
<span class="line">insert into root.factory1.d2(time, temperature) values(5000, 103.3);</span>
<span class="line">insert into root.factory1.d2(time, temperature) values(7000, 102.9);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d3(time, temperature) values(1000, 103.9);</span>
<span class="line">insert into root.factory1.d3(time, temperature) values(3000, 103.8);</span>
<span class="line">insert into root.factory1.d3(time, temperature) values(5000, 102.7);</span>
<span class="line">insert into root.factory1.d3(time, temperature) values(7000, 106.9);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d4(time, temperature) values(1000, 103.9);</span>
<span class="line">insert into root.factory1.d4(time, temperature) values(5000, 102.7);</span>
<span class="line">insert into root.factory1.d4(time, temperature) values(7000, 106.9);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d5(time, temperature) values(1000, 112.9);</span>
<span class="line">insert into root.factory1.d5(time, temperature) values(7000, 113.0);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d6(time, temperature) values(1000, 113.9);</span>
<span class="line">insert into root.factory1.d6(time, temperature) values(3000, 113.3);</span>
<span class="line">insert into root.factory1.d6(time, temperature) values(5000, 112.7);</span>
<span class="line">insert into root.factory1.d6(time, temperature) values(7000, 112.3);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d7(time, temperature) values(1000, 101.2);</span>
<span class="line">insert into root.factory1.d7(time, temperature) values(3000, 99.3);</span>
<span class="line">insert into root.factory1.d7(time, temperature) values(5000, 100.1);</span>
<span class="line">insert into root.factory1.d7(time, temperature) values(7000, 99.8);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d8(time, temperature) values(1000, 50.0);</span>
<span class="line">insert into root.factory1.d8(time, temperature) values(3000, 52.1);</span>
<span class="line">insert into root.factory1.d8(time, temperature) values(5000, 50.1);</span>
<span class="line">insert into root.factory1.d8(time, temperature) values(7000, 50.5);</span>
<span class="line"></span>
<span class="line">insert into root.factory1.d9(time, temperature) values(1000, 50.3);</span>
<span class="line">insert into root.factory1.d9(time, temperature) values(3000, 52.1);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="单标签聚合查询" tabindex="-1"><a class="header-anchor" href="#单标签聚合查询"><span>单标签聚合查询</span></a></h4><p>用户想统计该工厂每个地区的设备的温度的平均值，可以使用如下查询语句</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">SELECT AVG(temperature) FROM root.factory1.** GROUP BY TAGS(city);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该查询会将具有同一个 <code>city</code> 标签值的时间序列的所有满足查询条件的点做平均值计算，计算结果如下</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+--------+------------------+</span>
<span class="line">|    city|  avg(temperature)|</span>
<span class="line">+--------+------------------+</span>
<span class="line">| Beijing|104.04666697184244|</span>
<span class="line">|Shanghai|107.85000076293946|</span>
<span class="line">|    NULL| 50.84999910990397|</span>
<span class="line">+--------+------------------+</span>
<span class="line">Total line number = 3</span>
<span class="line">It costs 0.231s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果集中可以看到，和时间区间聚合、按层次聚合相比，标签聚合的查询结果的不同点是：</p><ol><li>标签聚合查询的聚合结果不会再做去星号展开，而是将多个时间序列的数据作为一个整体进行聚合计算。</li><li>标签聚合查询除了输出聚合结果列，还会输出聚合标签的键值列。该列的列名为聚合指定的标签键，列的值则为所有查询的时间序列中出现的该标签的值。<br> 如果某些时间序列未设置该标签，则在键值列中有一行单独的 <code>NULL</code> ，代表未设置标签的所有时间序列数据的聚合结果。</li></ol><h4 id="多标签聚合查询" tabindex="-1"><a class="header-anchor" href="#多标签聚合查询"><span>多标签聚合查询</span></a></h4><p>除了基本的单标签聚合查询外，还可以按顺序指定多个标签进行聚合计算。</p><p>例如，用户想统计每个城市的每个车间内设备的平均温度。但因为各个城市的车间名称有可能相同，所以不能直接按照 <code>workshop</code> 做标签聚合。必须要先按照城市，再按照车间处理。</p><p>SQL 语句如下</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">SELECT avg(temperature) FROM root.factory1.** GROUP BY TAGS(city, workshop);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询结果如下</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+--------+--------+------------------+</span>
<span class="line">|    city|workshop|  avg(temperature)|</span>
<span class="line">+--------+--------+------------------+</span>
<span class="line">|    NULL|    NULL| 50.84999910990397|</span>
<span class="line">|Shanghai|      w1|113.01666768391927|</span>
<span class="line">| Beijing|      w2| 104.4000004359654|</span>
<span class="line">|Shanghai|      w2|100.10000038146973|</span>
<span class="line">| Beijing|      w1|103.73750019073486|</span>
<span class="line">+--------+--------+------------------+</span>
<span class="line">Total line number = 5</span>
<span class="line">It costs 0.027s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果集中可以看到，和单标签聚合相比，多标签聚合的查询结果会根据指定的标签顺序，输出相应标签的键值列。</p><h4 id="基于时间区间的标签聚合查询" tabindex="-1"><a class="header-anchor" href="#基于时间区间的标签聚合查询"><span>基于时间区间的标签聚合查询</span></a></h4><p>按照时间区间聚合是时序数据库中最常用的查询需求之一。IoTDB 在基于时间区间的聚合基础上，支持进一步按照标签进行聚合查询。</p><p>例如，用户想统计时间 <code>[1000, 10000)</code> 范围内，每个城市每个车间中的设备每 5 秒内的平均温度。</p><p>SQL 语句如下</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">SELECT AVG(temperature) FROM root.factory1.** GROUP BY ([1000, 10000), 5s), TAGS(city, workshop);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询结果如下</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+--------+--------+------------------+</span>
<span class="line">|                         Time|    city|workshop|  avg(temperature)|</span>
<span class="line">+-----------------------------+--------+--------+------------------+</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|    NULL|    NULL| 50.91999893188476|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|Shanghai|      w1|113.20000076293945|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00| Beijing|      w2|             103.4|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|Shanghai|      w2| 100.1999994913737|</span>
<span class="line">|1970-01-01T08:00:01.000+08:00| Beijing|      w1|103.81666692097981|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|    NULL|    NULL|              50.5|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|Shanghai|      w1| 112.6500015258789|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00| Beijing|      w2| 106.9000015258789|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00|Shanghai|      w2| 99.80000305175781|</span>
<span class="line">|1970-01-01T08:00:06.000+08:00| Beijing|      w1|             103.5|</span>
<span class="line">+-----------------------------+--------+--------+------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和标签聚合相比，基于时间区间的标签聚合的查询会首先按照时间区间划定聚合范围，在时间区间内部再根据指定的标签顺序，进行相应数据的聚合计算。在输出的结果集中，会包含一列时间列，该时间列值的含义和时间区间聚合查询的相同。</p><h4 id="标签聚合查询的限制" tabindex="-1"><a class="header-anchor" href="#标签聚合查询的限制"><span>标签聚合查询的限制</span></a></h4><p>由于标签聚合功能仍然处于开发阶段，目前有如下未实现功能。</p><blockquote><ol><li>暂不支持 <code>HAVING</code> 子句过滤查询结果。</li><li>暂不支持结果按照标签值排序。</li><li>暂不支持 <code>LIMIT</code>，<code>OFFSET</code>，<code>SLIMIT</code>，<code>SOFFSET</code>。</li><li>暂不支持 <code>ALIGN BY DEVICE</code>。</li><li>暂不支持聚合函数内部包含表达式，例如 <code>count(s+1)</code>。</li><li>不支持值过滤条件聚合，和分层聚合查询行为保持一致。</li></ol></blockquote><h3 id="差值分段聚合" tabindex="-1"><a class="header-anchor" href="#差值分段聚合"><span>差值分段聚合</span></a></h3><p>IoTDB支持通过<code>GROUP BY VARIATION</code>语句来根据差值进行分组。<code>GROUP BY VARIATION</code>会将第一个点作为一个组的<strong>基准点</strong>，每个新的数据在按照给定规则与基准点进行差值运算后，<br> 如果差值小于给定的阈值则将该新点归于同一组，否则结束当前分组，以这个新的数据为新的基准点开启新的分组。<br> 该分组方式不会重叠，且没有固定的开始结束时间。其子句语法如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>controlExpression<span class="token punctuation">[</span><span class="token punctuation">,</span>delta<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>ignoreNull<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不同的参数含义如下</p><ul><li>controlExpression</li></ul><p>分组所参照的值，<strong>可以是查询数据中的某一列或是多列的表达式<br> （多列表达式计算后仍为一个值，使用多列表达式时指定的列必须都为数值列）</strong>， 差值便是根据数据的controlExpression的差值运算。</p><ul><li>delta</li></ul><p>分组所使用的阈值，同一分组中<strong>每个点的controlExpression对应的值与该组中基准点对应值的差值都小于<code>delta</code></strong>。当<code>delta=0</code>时，相当于一个等值分组，所有连续且expression值相同的数据将被分到一组。</p><ul><li>ignoreNull</li></ul><p>用于指定<code>controlExpression</code>的值为null时对数据的处理方式，当<code>ignoreNull</code>为false时，该null值会被视为新的值，<code>ignoreNull</code>为true时，则直接跳过对应的点。</p><p>在<code>delta</code>取不同值时，<code>controlExpression</code>支持的返回数据类型以及当<code>ignoreNull</code>为false时对于null值的处理方式可以见下表：</p><table><thead><tr><th>delta</th><th>controlExpression支持的返回类型</th><th>ignoreNull=false时对于Null值的处理</th></tr></thead><tbody><tr><td>delta!=0</td><td>INT32、INT64、FLOAT、DOUBLE</td><td>若正在维护分组的值不为null,null视为无穷大/无穷小，结束当前分组。连续的null视为差值相等的值，会被分配在同一个分组</td></tr><tr><td>delta=0</td><td>TEXT、BINARY、INT32、INT64、FLOAT、DOUBLE</td><td>null被视为新分组中的新值，连续的null属于相同的分组</td></tr></tbody></table><p>下图为差值分段的一个分段方式示意图，与组中第一个数据的控制列值的差值在delta内的控制列对应的点属于相同的分组。</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/GroupBy/groupByVariation.jpeg" alt="groupByVariation"><h4 id="使用注意事项" tabindex="-1"><a class="header-anchor" href="#使用注意事项"><span>使用注意事项</span></a></h4><ol><li><code>controlExpression</code>的结果应该为唯一值，如果使用通配符拼接后出现多列，则报错。</li><li>对于一个分组，默认Time列输出分组的开始时间，查询时可以使用select <code>__endTime</code>的方式来使得结果输出分组的结束时间。</li><li>与<code>ALIGN BY DEVICE</code>搭配使用时会对每个device进行单独的分组操作。</li><li>当没有指定<code>delta</code>和<code>ignoreNull</code>时，<code>delta</code>默认为0，<code>ignoreNull</code>默认为true。</li><li>当前暂不支持与<code>GROUP BY LEVEL</code>搭配使用。</li></ol><p>使用如下的原始数据，接下来会给出几个事件分段查询的使用样例</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------+-------+-------+--------+-------+-------+</span>
<span class="line">|                         Time|     s1|     s2|     s3|      s4|     s5|     s6|</span>
<span class="line">+-----------------------------+-------+-------+-------+--------+-------+-------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|    4.5|    9.0|    0.0|    45.0|    9.0|   8.25|</span>
<span class="line">|1970-01-01T08:00:00.010+08:00|   null|   19.0|   10.0|   145.0|   19.0|   8.25|</span>
<span class="line">|1970-01-01T08:00:00.020+08:00|   24.5|   29.0|   null|   245.0|   29.0|   null|</span>
<span class="line">|1970-01-01T08:00:00.030+08:00|   34.5|   null|   30.0|   345.0|   null|   null|</span>
<span class="line">|1970-01-01T08:00:00.040+08:00|   44.5|   49.0|   40.0|   445.0|   49.0|   8.25|</span>
<span class="line">|1970-01-01T08:00:00.050+08:00|   null|   59.0|   50.0|   545.0|   59.0|   6.25|</span>
<span class="line">|1970-01-01T08:00:00.060+08:00|   64.5|   69.0|   60.0|   645.0|   69.0|   null|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|   74.5|   79.0|   null|    null|   79.0|   3.25|</span>
<span class="line">|1970-01-01T08:00:00.080+08:00|   84.5|   89.0|   80.0|   845.0|   89.0|   3.25|</span>
<span class="line">|1970-01-01T08:00:00.090+08:00|   94.5|   99.0|   90.0|   945.0|   99.0|   3.25|</span>
<span class="line">|1970-01-01T08:00:00.150+08:00|   66.5|   77.0|   90.0|   945.0|   99.0|   9.25|</span>
<span class="line">+-----------------------------+-------+-------+-------+--------+-------+-------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delta-0时的等值事件分段" tabindex="-1"><a class="header-anchor" href="#delta-0时的等值事件分段"><span>delta=0时的等值事件分段</span></a></h4><p>使用如下sql语句</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg<span class="token punctuation">.</span>d <span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>s6<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下的查询结果，这里忽略了s6为null的行</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.040+08:00|             24.5|                  3|             50.0|</span>
<span class="line">|1970-01-01T08:00:00.050+08:00|1970-01-01T08:00:00.050+08:00|             null|                  1|             50.0|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.090+08:00|             84.5|                  3|            170.0|</span>
<span class="line">|1970-01-01T08:00:00.150+08:00|1970-01-01T08:00:00.150+08:00|             66.5|                  1|             90.0|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当指定ignoreNull为false时，会将s6为null的数据也考虑进来</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg<span class="token punctuation">.</span>d <span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>s6<span class="token punctuation">,</span> ignoreNull<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下的结果</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.010+08:00|              4.5|                  2|             10.0|</span>
<span class="line">|1970-01-01T08:00:00.020+08:00|1970-01-01T08:00:00.030+08:00|             29.5|                  1|             30.0|</span>
<span class="line">|1970-01-01T08:00:00.040+08:00|1970-01-01T08:00:00.040+08:00|             44.5|                  1|             40.0|</span>
<span class="line">|1970-01-01T08:00:00.050+08:00|1970-01-01T08:00:00.050+08:00|             null|                  1|             50.0|</span>
<span class="line">|1970-01-01T08:00:00.060+08:00|1970-01-01T08:00:00.060+08:00|             64.5|                  1|             60.0|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.090+08:00|             84.5|                  3|            170.0|</span>
<span class="line">|1970-01-01T08:00:00.150+08:00|1970-01-01T08:00:00.150+08:00|             66.5|                  1|             90.0|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delta-0时的差值事件分段" tabindex="-1"><a class="header-anchor" href="#delta-0时的差值事件分段"><span>delta!=0时的差值事件分段</span></a></h4><p>使用如下sql语句</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg<span class="token punctuation">.</span>d <span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>s6<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下的查询结果</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.050+08:00|             24.5|                  4|            100.0|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.090+08:00|             84.5|                  3|            170.0|</span>
<span class="line">|1970-01-01T08:00:00.150+08:00|1970-01-01T08:00:00.150+08:00|             66.5|                  1|             90.0|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>group by子句中的controlExpression同样支持列的表达式</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>sg<span class="token punctuation">.</span>d <span class="token keyword">group</span> <span class="token keyword">by</span> variation<span class="token punctuation">(</span>s6<span class="token operator">+</span>s5<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下的查询结果</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|                         Time|                    __endTime|avg(root.sg.d.s1)|count(root.sg.d.s2)|sum(root.sg.d.s3)|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line">|1970-01-01T08:00:00.000+08:00|1970-01-01T08:00:00.010+08:00|              4.5|                  2|             10.0|</span>
<span class="line">|1970-01-01T08:00:00.040+08:00|1970-01-01T08:00:00.050+08:00|             44.5|                  2|             90.0|</span>
<span class="line">|1970-01-01T08:00:00.070+08:00|1970-01-01T08:00:00.080+08:00|             79.5|                  2|             80.0|</span>
<span class="line">|1970-01-01T08:00:00.090+08:00|1970-01-01T08:00:00.150+08:00|             80.5|                  2|            180.0|</span>
<span class="line">+-----------------------------+-----------------------------+-----------------+-------------------+-----------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件分段聚合" tabindex="-1"><a class="header-anchor" href="#条件分段聚合"><span>条件分段聚合</span></a></h3><p>当需要根据指定条件对数据进行筛选，并将连续的符合条件的行分为一组进行聚合运算时，可以使用<code>GROUP BY CONDITION</code>的分段方式；不满足给定条件的行因为不属于任何分组会被直接简单忽略。<br> 其语法定义如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> condition<span class="token punctuation">(</span>predict<span class="token punctuation">,</span><span class="token punctuation">[</span>keep<span class="token operator">&gt;</span><span class="token operator">/</span><span class="token operator">&gt;=</span><span class="token operator">/</span><span class="token operator">=</span><span class="token operator">/</span><span class="token operator">&lt;=</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token punctuation">]</span>threshold<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">,</span>ignoreNull<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>predict</li></ul><p>返回boolean数据类型的合法表达式，用于分组的筛选。</p><ul><li>keep[&gt;/&gt;=/=/&lt;=/&lt;]threshold</li></ul><p>keep表达式用来指定形成分组所需要连续满足<code>predict</code>条件的数据行数，只有行数满足keep表达式的分组才会被输出。keep表达式由一个&#39;keep&#39;字符串和<code>long</code>类型的threshold组合或者是单独的<code>long</code>类型数据构成。</p><ul><li>ignoreNull=true/false</li></ul><p>用于指定遇到predict为null的数据行时的处理方式，为true则跳过该行，为false则结束当前分组。</p><h4 id="使用注意事项-1" tabindex="-1"><a class="header-anchor" href="#使用注意事项-1"><span>使用注意事项</span></a></h4><ol><li>keep条件在查询中是必需的，但可以省略掉keep字符串给出一个<code>long</code>类型常数，默认为<code>keep=该long型常数</code>的等于条件。</li><li><code>ignoreNull</code>默认为true。</li><li>对于一个分组，默认Time列输出分组的开始时间，查询时可以使用select <code>__endTime</code>的方式来使得结果输出分组的结束时间。</li><li>与<code>ALIGN BY DEVICE</code>搭配使用时会对每个device进行单独的分组操作。</li><li>当前暂不支持与<code>GROUP BY LEVEL</code>搭配使用。</li></ol><p>对于如下原始数据,下面会给出几个查询样例:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-------------------------+-------------------------------------+------------------------------------+</span>
<span class="line">|                         Time|root.sg.beijing.car01.soc|root.sg.beijing.car01.charging_status|root.sg.beijing.car01.vehicle_status|</span>
<span class="line">+-----------------------------+-------------------------+-------------------------------------+------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|                     14.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.002+08:00|                     16.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.003+08:00|                     16.0|                                    0|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.004+08:00|                     16.0|                                    0|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.005+08:00|                     18.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.006+08:00|                     24.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.007+08:00|                     36.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.008+08:00|                     36.0|                                 null|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.009+08:00|                     45.0|                                    1|                                   1|</span>
<span class="line">|1970-01-01T08:00:00.010+08:00|                     60.0|                                    1|                                   1|</span>
<span class="line">+-----------------------------+-------------------------+-------------------------------------+------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询至少连续两行以上的charging_status=1的数据，sql语句如下:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> max_time<span class="token punctuation">(</span>charging_status<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>vehicle_status<span class="token punctuation">)</span><span class="token punctuation">,</span>last_value<span class="token punctuation">(</span>soc<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> condition<span class="token punctuation">(</span>charging_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>KEEP<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">,</span>ignoreNull<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到结果如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line">|                         Time|max_time(root.sg.beijing.car01.charging_status)|count(root.sg.beijing.car01.vehicle_status)|last_value(root.sg.beijing.car01.soc)|</span>
<span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|                                              2|                                          2|                                 16.0|</span>
<span class="line">|1970-01-01T08:00:00.005+08:00|                                             10|                                          5|                                 60.0|</span>
<span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当设置<code>ignoreNull</code>为false时，遇到null值为将其视为一个不满足条件的行，会结束正在计算的分组。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> max_time<span class="token punctuation">(</span>charging_status<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>vehicle_status<span class="token punctuation">)</span><span class="token punctuation">,</span>last_value<span class="token punctuation">(</span>soc<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> condition<span class="token punctuation">(</span>charging_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>KEEP<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">,</span>ignoreNull<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果，原先的分组被含null的行拆分:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line">|                         Time|max_time(root.sg.beijing.car01.charging_status)|count(root.sg.beijing.car01.vehicle_status)|last_value(root.sg.beijing.car01.soc)|</span>
<span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line">|1970-01-01T08:00:00.001+08:00|                                              2|                                          2|                                 16.0|</span>
<span class="line">|1970-01-01T08:00:00.005+08:00|                                              7|                                          3|                                 36.0|</span>
<span class="line">|1970-01-01T08:00:00.009+08:00|                                             10|                                          2|                                 60.0|</span>
<span class="line">+-----------------------------+-----------------------------------------------+-------------------------------------------+-------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="会话分段聚合" tabindex="-1"><a class="header-anchor" href="#会话分段聚合"><span>会话分段聚合</span></a></h3><p><code>GROUP BY SESSION</code>可以根据时间列的间隔进行分组，在结果集的时间列中，时间间隔小于等于设定阈值的数据会被分为一组。例如在工业场景中，设备并不总是连续运行，<code>GROUP BY SESSION</code>会将设备每次接入会话所产生的数据分为一组。<br> 其语法定义如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">session</span><span class="token punctuation">(</span>timeInterval<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>timeInterval</li></ul><p>设定的时间差阈值，当两条数据时间列的差值大于该阈值，则会给数据创建一个新的分组。</p><p>下图为<code>group by session</code>下的一个分组示意图</p><img style="width:100%;max-width:800px;max-height:600px;margin-left:auto;margin-right:auto;display:block;" src="https://alioss.timecho.com/docs/img/UserGuide/Process-Data/GroupBy/groupBySession.jpeg"><h4 id="使用注意事项-2" tabindex="-1"><a class="header-anchor" href="#使用注意事项-2"><span>使用注意事项</span></a></h4><ol><li>对于一个分组，默认Time列输出分组的开始时间，查询时可以使用select <code>__endTime</code>的方式来使得结果输出分组的结束时间。</li><li>与<code>ALIGN BY DEVICE</code>搭配使用时会对每个device进行单独的分组操作。</li><li>当前暂不支持与<code>GROUP BY LEVEL</code>搭配使用。</li></ol><p>对于下面的原始数据，给出几个查询样例。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------+-----------+--------+------+</span>
<span class="line">|                         Time|           Device|temperature|hardware|status|</span>
<span class="line">+-----------------------------+-----------------+-----------+--------+------+</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|root.ln.wf02.wt01|       35.7|      11| false|</span>
<span class="line">|1970-01-01T08:00:02.000+08:00|root.ln.wf02.wt01|       35.8|      22|  true|</span>
<span class="line">|1970-01-01T08:00:03.000+08:00|root.ln.wf02.wt01|       35.4|      33| false|</span>
<span class="line">|1970-01-01T08:00:04.000+08:00|root.ln.wf02.wt01|       36.4|      44| false|</span>
<span class="line">|1970-01-01T08:00:05.000+08:00|root.ln.wf02.wt01|       36.8|      55| false|</span>
<span class="line">|1970-01-01T08:00:10.000+08:00|root.ln.wf02.wt01|       36.8|     110| false|</span>
<span class="line">|1970-01-01T08:00:20.000+08:00|root.ln.wf02.wt01|       37.8|     220|  true|</span>
<span class="line">|1970-01-01T08:00:30.000+08:00|root.ln.wf02.wt01|       37.5|     330| false|</span>
<span class="line">|1970-01-01T08:00:40.000+08:00|root.ln.wf02.wt01|       37.4|     440| false|</span>
<span class="line">|1970-01-01T08:00:50.000+08:00|root.ln.wf02.wt01|       37.9|     550| false|</span>
<span class="line">|1970-01-01T08:01:40.000+08:00|root.ln.wf02.wt01|       38.0|     110| false|</span>
<span class="line">|1970-01-01T08:02:30.000+08:00|root.ln.wf02.wt01|       38.8|     220|  true|</span>
<span class="line">|1970-01-01T08:03:20.000+08:00|root.ln.wf02.wt01|       38.6|     330| false|</span>
<span class="line">|1970-01-01T08:04:20.000+08:00|root.ln.wf02.wt01|       38.4|     440| false|</span>
<span class="line">|1970-01-01T08:05:20.000+08:00|root.ln.wf02.wt01|       38.3|     550| false|</span>
<span class="line">|1970-01-01T08:06:40.000+08:00|root.ln.wf02.wt01|       null|       0|  null|</span>
<span class="line">|1970-01-01T08:07:50.000+08:00|root.ln.wf02.wt01|       null|       0|  null|</span>
<span class="line">|1970-01-01T08:08:00.000+08:00|root.ln.wf02.wt01|       null|       0|  null|</span>
<span class="line">|1970-01-02T08:08:01.000+08:00|root.ln.wf02.wt01|       38.2|     110| false|</span>
<span class="line">|1970-01-02T08:08:02.000+08:00|root.ln.wf02.wt01|       37.5|     220|  true|</span>
<span class="line">|1970-01-02T08:08:03.000+08:00|root.ln.wf02.wt01|       37.4|     330| false|</span>
<span class="line">|1970-01-02T08:08:04.000+08:00|root.ln.wf02.wt01|       36.8|     440| false|</span>
<span class="line">|1970-01-02T08:08:05.000+08:00|root.ln.wf02.wt01|       37.4|     550| false|</span>
<span class="line">+-----------------------------+-----------------+-----------+--------+------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以按照不同的时间单位设定时间间隔，sql语句如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">session</span><span class="token punctuation">(</span><span class="token number">1</span>d<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------------------+------------------------------------+---------------------------------+-------------------------------+</span>
<span class="line">|                         Time|                    __endTime|count(root.ln.wf02.wt01.temperature)|count(root.ln.wf02.wt01.hardware)|count(root.ln.wf02.wt01.status)|</span>
<span class="line">+-----------------------------+-----------------------------+------------------------------------+---------------------------------+-------------------------------+</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|1970-01-01T08:08:00.000+08:00|                                  15|                               18|                             15|</span>
<span class="line">|1970-01-02T08:08:01.000+08:00|1970-01-02T08:08:05.000+08:00|                                   5|                                5|                              5|</span>
<span class="line">+-----------------------------+-----------------------------+------------------------------------+---------------------------------+-------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以和<code>HAVING</code>、<code>ALIGN BY DEVICE</code>共同使用</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> __endTime<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>hardware<span class="token punctuation">)</span> <span class="token keyword">from</span> root<span class="token punctuation">.</span>ln<span class="token punctuation">.</span>wf02<span class="token punctuation">.</span>wt01 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">session</span><span class="token punctuation">(</span><span class="token number">50</span>s<span class="token punctuation">)</span> <span class="token keyword">having</span> <span class="token function">sum</span><span class="token punctuation">(</span>hardware<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span> align <span class="token keyword">by</span> device</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到如下结果，其中排除了<code>sum(hardware)</code>为0的部分</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------------------+-----------------+-----------------------------+-------------+</span>
<span class="line">|                         Time|           Device|                    __endTime|sum(hardware)|</span>
<span class="line">+-----------------------------+-----------------+-----------------------------+-------------+</span>
<span class="line">|1970-01-01T08:00:01.000+08:00|root.ln.wf02.wt01|1970-01-01T08:03:20.000+08:00|       2475.0|</span>
<span class="line">|1970-01-01T08:04:20.000+08:00|root.ln.wf02.wt01|1970-01-01T08:04:20.000+08:00|        440.0|</span>
<span class="line">|1970-01-01T08:05:20.000+08:00|root.ln.wf02.wt01|1970-01-01T08:05:20.000+08:00|        550.0|</span>
<span class="line">|1970-01-02T08:08:01.000+08:00|root.ln.wf02.wt01|1970-01-02T08:08:05.000+08:00|       1650.0|</span>
<span class="line">+-----------------------------+-----------------+-----------------------------+-------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,208)]))}const o=n(i,[["render",t],["__file","Group-By.html.vue"]]),r=JSON.parse('{"path":"/zh/UserGuide/V1.1.x/Query-Data/Group-By.html","title":"","lang":"zh-CN","frontmatter":{"description":"分段分组聚合 时间区间分段聚合 分段聚合是一种时序数据典型的查询方式，数据以高频进行采集，需要按照一定的时间间隔进行聚合计算，如计算每天的平均气温，需要将气温的序列按天进行分段，然后计算平均值。 在 IoTDB 中，聚合查询可以通过 GROUP BY 子句指定按照时间区间分段聚合。用户可以指定聚合的时间间隔和滑动步长，相关参数如下： 参数 1：时间轴显...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://iotdb.apache.org/UserGuide/V1.1.x/Query-Data/Group-By.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/zh/UserGuide/V1.1.x/Query-Data/Group-By.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:description","content":"分段分组聚合 时间区间分段聚合 分段聚合是一种时序数据典型的查询方式，数据以高频进行采集，需要按照一定的时间间隔进行聚合计算，如计算每天的平均气温，需要将气温的序列按天进行分段，然后计算平均值。 在 IoTDB 中，聚合查询可以通过 GROUP BY 子句指定按照时间区间分段聚合。用户可以指定聚合的时间间隔和滑动步长，相关参数如下： 参数 1：时间轴显..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-07-10T03:11:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-10T03:11:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-10T03:11:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分段分组聚合","slug":"分段分组聚合","link":"#分段分组聚合","children":[{"level":3,"title":"时间区间分段聚合","slug":"时间区间分段聚合","link":"#时间区间分段聚合","children":[]},{"level":3,"title":"路径层级分组聚合","slug":"路径层级分组聚合","link":"#路径层级分组聚合","children":[]},{"level":3,"title":"标签分组聚合","slug":"标签分组聚合","link":"#标签分组聚合","children":[]},{"level":3,"title":"差值分段聚合","slug":"差值分段聚合","link":"#差值分段聚合","children":[]},{"level":3,"title":"条件分段聚合","slug":"条件分段聚合","link":"#条件分段聚合","children":[]},{"level":3,"title":"会话分段聚合","slug":"会话分段聚合","link":"#会话分段聚合","children":[]}]}],"git":{"createdTime":1688958677000,"updatedTime":1688958677000,"contributors":[{"name":"CritasWang","email":"critas@outlook.com","commits":1}]},"readingTime":{"minutes":26.71,"words":8014},"filePathRelative":"zh/UserGuide/V1.1.x/Query-Data/Group-By.md","localizedDate":"2023年7月10日","autoDesc":true}');export{o as comp,r as data};
